<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IGT.PA.Framework.EgmClients.Avp</name>
    </assembly>
    <members>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Exceptions.InvalidMeterException">
            <summary>
            Exception thrown when an invalid meter is defined.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Exceptions.InvalidMeterException.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Exceptions.InvalidMeterException.#ctor(System.String)">
            <summary>
            Message constructor
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Exceptions.InvalidMeterException.#ctor(System.String,System.Exception)">
            <summary>
            Inner-exception Constructor
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Exception to wrap</param>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Game">
            <summary>
            Class for configuring Game config Items
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Game.GamePlayMinimumTimeMs">
            <summary>
            Gets or sets the game play minimum time ms.
            </summary>
            <value>
            The game play minimum time ms.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Game.SpectrumDisplayOnOverflow">
            <summary>
            Gets or sets the spectrum display on overflow.
            </summary>
            <value>
            The spectrum display on overflow.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Game.CashoutCelebrationAnimationEnabled">
            <summary>
            Gets or sets a value indicating whether [cashout celebration animation enabled].
            </summary>
            <value>
            	<c>true</c> if [cashout celebration animation enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Game.UseMainMenuDigitalGlass">
            <summary>
            Gets or sets a value indicating whether [use main menu digital glass].
            </summary>
            <value>
            	<c>true</c> if [use main menu digital glass]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Game.WhoCanStartAutoplay">
            <summary>
            Gets or sets the who can start autoplay.
            </summary>
            <value>
            The who can start autoplay.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Game.DoubleUpAllowed">
            <summary>
            Gets or sets a value indicating whether [double up allowed].
            </summary>
            <value>
              <c>true</c> if [double up allowed]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Game.DoubleUpLimitDollars">
            <summary>
            Gets or sets the double up limit dollars.
            </summary>
            <value>
            The double up limit dollars.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Game.DoubleUpMaxCycles">
            <summary>
            Gets or sets the double up max cycles.
            </summary>
            <value>
            The double up max cycles.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.AvpButton">
            <summary>
            Implementation of <see cref="T:IGT.PA.Framework.EgmClients.Interfaces.IButton"/> for AVP
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.AvpButton.isDown">
            <summary>
            Internal variable for IsDown property.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpButton.AvpApi_ButtonDown(System.Object,IGT.PA.Framework.EgmClients.Interfaces.ButtonEventArgs)">
            <summary>
            ButtonDown event handler (AvpEgmApi.ButtonDown)
            </summary>
            <param name="sender">AvpEgmApi</param>
            <param name="e">button event args</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpButton.AvpApi_ButtonUp(System.Object,IGT.PA.Framework.EgmClients.Interfaces.ButtonEventArgs)">
            <summary>
            ButtonUp event handler (AvpEgmApi.ButtonUp)
            </summary>
            <param name="sender">AvpEgmApi</param>
            <param name="e">button event args</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpButton.Press">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpButton.PressAndHold">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpButton.Release">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpButton.KeyValue">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpButton.IsDown">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpButton.ButtonDown">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpButton.ButtonUp">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpButton.ButtonPress">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpButton.Name">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpButton.Code">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpButton.Id">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpButton.IsActive">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpButton.NameChanged">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpButton.CodeChanged">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpButton.IdChanged">
            <inheritdoc/>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Events.AvpEvent">
            <summary>
            Stores information about a specific AVP Event
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.AvpEvent.#ctor(IGT.PA.Framework.EgmClients.Avp.Events.XmlEvent)">
            <summary>
            Initialize the contents based on an event from the EGM
            </summary>
            <param name="ev">XmlEvent data from the EGM</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.AvpEvent.ParseEvent(IGT.PA.Framework.EgmClients.Avp.Events.XmlEvent)">
            <summary>
            Read the data from the XmlEvent and parse it into a more useful format.
            </summary>
            <param name="ev">XmlEvent data from the EGM</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.AvpEvent.ToString">
            <summary>
            GetBank a description of the Event
            </summary>
            <returns>string description of event</returns>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Events.AvpEvent.Name">
            <summary>
            Name of the event
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Events.AvpEvent.Sequence">
            <summary>
            Sequence number of event.
            Increments once for each event, can be used to determine if events have been missed.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Events.AvpEvent.Timestamp">
            <summary>
            Time the event occured (EGM time)
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Events.AvpEvent.Data">
            <summary>
            Key, Value data associated with the event
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.CashDevices">
            <summary>
            Class which controls CashDevices config options
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDevices.HopperEnabled">
            <summary>
            Gets or sets a value indicating whether [hopper enabled].
            </summary>
            <value>
              <c>true</c> if [hopper enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDevices.CoinAcceptor1Enabled">
            <summary>
            Gets or sets a value indicating whether [coin acceptor1 enabled].
            </summary>
            <value>
            	<c>true</c> if [coin acceptor1 enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDevices.PhysicalBillValidatorEnabled">
            <summary>
            Gets or sets a value indicating whether [physical bill validator enabled].
            </summary>
            <value>
            	<c>true</c> if [physical bill validator enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDevices.BillValidatorAcceptsBills">
            <summary>
            Gets or sets a value indicating whether [bill validator accepts bills].
            </summary>
            <value>
            	<c>true</c> if [bill validator accepts bills]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.CashDeviceTilts">
            <summary>
            Class which controls CashDeviceTilts config options
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDeviceTilts.PaperLowTiltType">
            <summary>
            Gets or sets the type of the paper low tilt.
            </summary>
            <value>
            The type of the paper low tilt.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDeviceTilts.NumberOfBillRejectsBeforeSoftTilt">
            <summary>
            Gets or sets the number of bill rejects before soft tilt.
            </summary>
            <value>
            The number of bill rejects before soft tilt.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDeviceTilts.StackerFullTiltType">
            <summary>
            Gets or sets the type of the stacker full tilt.
            </summary>
            <value>
            The type of the stacker full tilt.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDeviceTilts.StackerAlmostFullTiltType">
            <summary>
            Gets or sets the type of the stacker almost full tilt.
            </summary>
            <value>
            The type of the stacker almost full tilt.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDeviceTilts.StackerOpenTiltType">
            <summary>
            Gets or sets the type of the stacker open tilt.
            </summary>
            <value>
            The type of the stacker open tilt.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDeviceTilts.BillJamTiltType">
            <summary>
            Gets or sets the type of the bill jam tilt.
            </summary>
            <value>
            The type of the bill jam tilt.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDeviceTilts.BillValidatorProgramChangedTiltType">
            <summary>
            Gets or sets the type of the bill validator program changed tilt.
            </summary>
            <value>
            The type of the bill validator program changed tilt.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDeviceTilts.StackerTimeoutTiltType">
            <summary>
            Gets or sets the type of the stacker timeout tilt.
            </summary>
            <value>
            The type of the stacker timeout tilt.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDeviceTilts.UnexpectedItemStackedTiltType">
            <summary>
            Gets or sets the type of the unexpected item stacked tilt.
            </summary>
            <value>
            The type of the unexpected item stacked tilt.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.MonetaryCashTypes">
            <summary>
            Class which controls MonetaryCashTypes config options
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MonetaryCashTypes.NativeMonetaryType">
            <summary>
            Gets or sets the type of the native monetary.
            </summary>
            <value>
            The type of the native monetary.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MonetaryCashTypes.WholeCurrencySymbol">
            <summary>
            Gets or sets the whole currency symbol.
            </summary>
            <value>
            The whole currency symbol.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MonetaryCashTypes.BaseCurrencySymbol">
            <summary>
            Gets or sets the base currency symbol.
            </summary>
            <value>
            The base currency symbol.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MonetaryCashTypes.UnicodeFontWholeCurrencySymbol">
            <summary>
            Gets or sets the unicode font whole currency symbol.
            </summary>
            <value>
            The unicode font whole currency symbol.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MonetaryCashTypes.UnicodeFontBaseCurrencySymbol">
            <summary>
            Gets or sets the unicode font base currency symbol.
            </summary>
            <value>
            The unicode font base currency symbol.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MonetaryCashTypes.BillValidatorCountryCode">
            <summary>
            Gets or sets the bill validator country code.
            </summary>
            <value>
            The bill validator country code.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MonetaryCashTypes.DecimalSeparatorSymbol">
            <summary>
            Gets or sets the decimal separator symbol.
            </summary>
            <value>
            The decimal separator symbol.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MonetaryCashTypes.NumericalGroupSeparatorSymbol">
            <summary>
            Gets or sets the numerical group separator symbol.
            </summary>
            <value>
            The numerical group separator symbol.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MonetaryCashTypes.EqualDisplayForMonetaryAndNonMonetary">
            <summary>
            Gets or sets a value indicating whether [equal display for monetary and non monetary].
            </summary>
            <value>
            	<c>true</c> if [equal display for monetary and non monetary]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MonetaryCashTypes.DefaultCreditMeterDisplay">
            <summary>
            Gets or sets the default credit meter display.
            </summary>
            <value>
            The default credit meter display.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Limits">
            <summary>
            Class which controls Limit config options
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.CreditLimit">
            <summary>
            Gets or sets the credit limit.
            </summary>
            <value>
            The credit limit.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.CashInLimit">
            <summary>
            Gets or sets the cash in limit.
            </summary>
            <value>
            The cash in limit.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.NonCashInLimit">
            <summary>
            Gets or sets the non cash in limit.
            </summary>
            <value>
            The non cash in limit.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.CashInLimitType">
            <summary>
            Gets or sets the type of the cash in limit.
            </summary>
            <value>
            The type of the cash in limit.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.TransferToTicketLimit">
            <summary>
            Gets or sets the transfer to ticket limit.
            </summary>
            <value>
            The transfer to ticket limit.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.MachineMonetaryBetLimit">
            <summary>
            Gets or sets the machine monetary bet limit.
            </summary>
            <value>
            The machine monetary bet limit.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.HandpayMinimumLimit">
            <summary>
            Gets or sets the handpay minimum limit.
            </summary>
            <value>
            The handpay minimum limit.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.W2GLimit">
            <summary>
            Gets or sets the w2 G limit.
            </summary>
            <value>
            The w2 G limit.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.MaxMidgameBetLimit">
            <summary>
            Gets or sets the max midgame bet limit.
            </summary>
            <value>
            The max midgame bet limit.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.MidgameBetsCountTowardMaxBet">
            <summary>
            Gets or sets a value indicating whether [midgame bets count toward max bet].
            </summary>
            <value>
            	<c>true</c> if [midgame bets count toward max bet]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.MaxHopperPayoutNoCashoutVouchers">
            <summary>
            Gets or sets the max hopper payout no cashout vouchers.
            </summary>
            <value>
            The max hopper payout no cashout vouchers.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.MaxHopperPayoutWithCashoutVouchers">
            <summary>
            Gets or sets the max hopper payout with cashout vouchers.
            </summary>
            <value>
            The max hopper payout with cashout vouchers.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.HopperPayoutBeforeCashoutVoucher">
            <summary>
            Gets or sets the hopper payout before cashout voucher.
            </summary>
            <value>
            The hopper payout before cashout voucher.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.PayHandpayCoinPortionFromHopper">
            <summary>
            Gets or sets a value indicating whether [pay handpay coin portion from hopper].
            </summary>
            <value>
            	<c>true</c> if [pay handpay coin portion from hopper]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.MaxCancellableHandpayLimit">
            <summary>
            Gets or sets the max cancellable handpay limit.
            </summary>
            <value>
            The max cancellable handpay limit.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.CancellableHandpayTimeoutSeconds">
            <summary>
            Gets or sets the cancellable handpay timeout seconds.
            </summary>
            <value>
            The cancellable handpay timeout seconds.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.MaxPlayerDisplayedHandpay">
            <summary>
            Gets or sets the max player displayed handpay.
            </summary>
            <value>
            The max player displayed handpay.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.MaxCashoutVoucherLimit">
            <summary>
            Gets or sets the max cashout voucher limit.
            </summary>
            <value>
            The max cashout voucher limit.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Limits.CashoutBehaviorWhileTerminalDisabled">
            <summary>
            Gets or sets the cashout behavior while terminal disabled.
            </summary>
            <value>
            The cashout behavior while terminal disabled.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.CashDenominations">
            <summary>
            Class which controls Cash Denominations config options
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDenominations.AccountingDenomination">
            <summary>
            Gets or sets the accounting denomination.
            </summary>
            <value>
            The accounting denomination.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDenominations.EnforceSASLimitOnAvailableDenoms">
            <summary>
            Gets or sets a value indicating whether [enforce SAS limit on available denoms].
            </summary>
            <value>
            	<c>true</c> if [enforce SAS limit on available denoms]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDenominations.DefaultPlayerDenomination">
            <summary>
            Gets or sets the default player denomination.
            </summary>
            <value>
            The default player denomination.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDenominations.CoinAcceptor1Denomination">
            <summary>
            Gets or sets the coin acceptor1 denomination.
            </summary>
            <value>
            The coin acceptor1 denomination.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDenominations.AllowHandpayLessThanHopperDenom">
            <summary>
            Gets or sets a value indicating whether [allow handpay less than hopper denom].
            </summary>
            <value>
            	<c>true</c> if [allow handpay less than hopper denom]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDenominations.ForceCreditPlayoffBelowHopperDenomination">
            <summary>
            Gets or sets a value indicating whether [force credit playoff below hopper denomination].
            </summary>
            <value>
            	<c>true</c> if [force credit playoff below hopper denomination]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDenominations.HopperDenomination">
            <summary>
            Gets or sets the hopper denomination.
            </summary>
            <value>
            The hopper denomination.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashDenominations.BillDenominationsAccepted">
            <summary>
            Gets the bill denominations accepted.
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.CashHandling">
            <summary>
            Class which controls Cash Handling config options
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.CashHandling.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi)">
            <summary>
            Initializes a new instance of the <see cref="T:IGT.PA.Framework.EgmClients.Avp.CashHandling"/> class.
            </summary>
            <param name="egmApiObj">The egm API obj.</param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashHandling.DenominationsOptions">
            <summary>
            Gets the denominations options.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashHandling.LimitOptions">
            <summary>
            Gets the limit options.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashHandling.MonetaryTypeOptions">
            <summary>
            Gets the monetary type options.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashHandling.DeviceTiltOptions">
            <summary>
            Gets the device tilt options.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashHandling.DevicesOptions">
            <summary>
            Gets the devices options.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashHandling.W2GEnabled">
            <summary>
            Gets or sets a value indicating whether [w2 G enabled].
            </summary>
            <value>
              <c>true</c> if [w2 G enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CashHandling.ExtensibleFundsTransferEnabled">
            <summary>
            Gets or sets a value indicating whether [extensible funds transfer enabled].
            </summary>
            <value>
            	<c>true</c> if [extensible funds transfer enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpPaytable.Name">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpPaytable.Code">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpPaytable.Id">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpPaytable.IsActive">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpPaytable.NameChanged">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpPaytable.CodeChanged">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpPaytable.IdChanged">
            <inheritdoc/>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.MenuMeter">
            <summary>
            Menu Meters as displayed to the user
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.MenuMeter.#ctor(System.String,System.String,System.String)">
            <summary>
            Menu meters
            </summary>
            <param name="metername">Name of the menu</param>
            <param name="description">Text discription of the meter</param>
            <param name="value">Value of the meter</param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MenuMeter.MenuName">
            <summary>
            Gets or sets the name of the meter.
            </summary>
            <value>
            The name of the meter.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MenuMeter.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MenuMeter.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.SiteID">
            <summary>
            Class for configuring Side config items
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.SiteID.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi)">
            <summary>
            Initializes a new instance of the <see cref="T:IGT.PA.Framework.EgmClients.Avp.SiteID"/> class.
            </summary>
            <param name="egmApiObj">The egm API obj.</param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.SiteID.EstablishmentOperatorOverride">
            <summary>
            Gets or sets the establishment operator override.
            </summary>
            <value>
            The establishment operator override.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.SiteID.LocationOperatorOverride">
            <summary>
            Gets or sets the location operator override.
            </summary>
            <value>
            The location operator override.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.SiteID.CityStateZipOperatorOverride">
            <summary>
            Gets or sets the city state zip operator override.
            </summary>
            <value>
            The city state zip operator override.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.SiteID.PlayableOnlyOperatorOverride">
            <summary>
            Gets or sets the playable only operator override.
            </summary>
            <value>
            The playable only operator override.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.SiteID.DebitTicketOperatorOverride">
            <summary>
            Gets or sets the debit ticket operator override.
            </summary>
            <value>
            The debit ticket operator override.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.MediaDisplay">
            <summary>
            Class for Configuring Media display config items
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.MediaDisplay.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi)">
            <summary>
            Initializes a new instance of the <see cref="T:IGT.PA.Framework.EgmClients.Avp.MediaDisplay"/> class.
            </summary>
            <param name="egmApiObj">The egm API obj.</param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MediaDisplay.ContentCacheSizeMB">
            <summary>
            Gets or sets the content cache size MB.
            </summary>
            <value>
            The content cache size MB.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MediaDisplay.MediaDisplayInterfaceLocalPort">
            <summary>
            Gets or sets the media display interface local port.
            </summary>
            <value>
            The media display interface local port.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MediaDisplay.ChallengePassword">
            <summary>
            Gets or sets the challenge password.
            </summary>
            <value>
            The challenge password.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MediaDisplay.SetIdentity">
            <summary>
            Gets or sets the set identity.
            </summary>
            <value>
            The set identity.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MediaDisplay.MediaScepRespondeUri">
            <summary>
            Gets or sets the media scep responde URI.
            </summary>
            <value>
            The media scep responde URI.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MediaDisplay.MediaOcspRespondeUri">
            <summary>
            Gets or sets the media ocsp responde URI.
            </summary>
            <value>
            The media ocsp responde URI.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MediaDisplay.HandleServiceButton">
            <summary>
            Gets or sets a value indicating whether [handle service button].
            </summary>
            <value>
              <c>true</c> if [handle service button]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MediaDisplay.DigitalGlassEnable">
            <summary>
            Gets or sets a value indicating whether [digital glass enable].
            </summary>
            <value>
              <c>true</c> if [digital glass enable]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MediaDisplay.PlayerBanner">
            <summary>
            Gets or sets the player banner.
            </summary>
            <value>
            The player banner.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MediaDisplay.ApplicationHandlesServiceButton">
            <summary>
            Gets or sets a value indicating whether [application handles service button].
            </summary>
            <value>
            	<c>true</c> if [application handles service button]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Sound">
            <summary>
            Class for configuring sounds config items
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Sound.SecurityAlarmsVolume">
            <summary>
            Gets or sets the security alarms volume.
            </summary>
            <value>
            The security alarms volume.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Sound.TiltsVolume">
            <summary>
            Gets or sets the tilts volume.
            </summary>
            <value>
            The tilts volume.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Sound.GameSoundsVolume">
            <summary>
            Gets or sets the game sounds volume.
            </summary>
            <value>
            The game sounds volume.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Sound.GameSpecialVolume">
            <summary>
            Gets or sets the game special volume.
            </summary>
            <value>
            The game special volume.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Sound.UserFeedbackVolume">
            <summary>
            Gets or sets the user feedback volume.
            </summary>
            <value>
            The user feedback volume.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Sound.VocalSoundsVolume">
            <summary>
            Gets or sets the vocal sounds volume.
            </summary>
            <value>
            The vocal sounds volume.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Sound.SystemSoundsVolume">
            <summary>
            Gets or sets the system sounds volume.
            </summary>
            <value>
            The system sounds volume.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Sound.PlayerVolumeButtonEnabled">
            <summary>
            Gets or sets a value indicating whether [player volume button enabled].
            </summary>
            <value>
            	<c>true</c> if [player volume button enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Sound.MuteAllSounds">
            <summary>
            Gets or sets a value indicating whether [mute all sounds].
            </summary>
            <value>
              <c>true</c> if [mute all sounds]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.PlayerLockout">
            <summary>
            Class for configuring Player Lockout config items
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.PlayerLockout.PlayerLockoutDisplayText">
            <summary>
            Gets or sets the player lockout display text.
            </summary>
            <value>
            The player lockout display text.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.PlayerLockout.HardwarePlayerLockoutEnabled">
            <summary>
            Gets or sets a value indicating whether [hardware player lockout enabled].
            </summary>
            <value>
            	<c>true</c> if [hardware player lockout enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.PlayerLockout.UseCandleToIndicatePlayerLockout">
            <summary>
            Gets or sets a value indicating whether [use candle to indicate player lockout].
            </summary>
            <value>
            	<c>true</c> if [use candle to indicate player lockout]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.CardReader">
            <summary>
            Class for configuring card reader config items
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Candle">
            <summary>
            Class for configuring candle config items
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Candle.NumberOfCandleStages">
            <summary>
            Gets or sets the number of candle stages.
            </summary>
            <value>
            The number of candle stages.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Candle.GameCompleteCandleTimeoutSeconds">
            <summary>
            Gets or sets the game complete candle timeout seconds.
            </summary>
            <value>
            The game complete candle timeout seconds.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Candle.CandleIndicatesPlayerLockoutActive">
            <summary>
            Gets or sets a value indicating whether [candle indicates player lockout active].
            </summary>
            <value>
            	<c>true</c> if [candle indicates player lockout active]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Candle.CandleIndicatesRemoteConfigInProcess">
            <summary>
            Gets or sets a value indicating whether [candle indicates remote config in process].
            </summary>
            <value>
            	<c>true</c> if [candle indicates remote config in process]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Cabinet">
            <summary>
            Class for configuring Cabinet config items
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Cabinet.CabinetSerialNumber">
            <summary>
            Gets or sets the cabinet serial number.
            </summary>
            <value>
            The cabinet serial number.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Cabinet.CabinetAssetNumber">
            <summary>
            Gets or sets the cabinet asset number.
            </summary>
            <value>
            The cabinet asset number.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Cabinet.MachineFloorLocation">
            <summary>
            Gets or sets the machine floor location.
            </summary>
            <value>
            The machine floor location.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Cabinet.CabinetModel">
            <summary>
            Gets or sets the cabinet model.
            </summary>
            <value>
            The cabinet model.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.ButtonPanel">
            <summary>
            Class for configuring button config items
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Bell">
            <summary>
            Class for configuring Bell config items
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Bell.BellEnabledOnMainDoor">
            <summary>
            Gets or sets a value indicating whether [bell enabled on main door].
            </summary>
            <value>
            	<c>true</c> if [bell enabled on main door]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Bell.BellEnabledOnDropDoor">
            <summary>
            Gets or sets a value indicating whether [bell enabled on drop door].
            </summary>
            <value>
            	<c>true</c> if [bell enabled on drop door]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Bell.BellEnabledOnBillValidatorDoor">
            <summary>
            Gets or sets a value indicating whether [bell enabled on bill validator door].
            </summary>
            <value>
            	<c>true</c> if [bell enabled on bill validator door]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Bell.BellEnabledOnProcessorBoardDoor">
            <summary>
            Gets or sets a value indicating whether [bell enabled on processor board door].
            </summary>
            <value>
            	<c>true</c> if [bell enabled on processor board door]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Bell.BellEnabledOnFrontDoor">
            <summary>
            Gets or sets a value indicating whether [bell enabled on front door].
            </summary>
            <value>
            	<c>true</c> if [bell enabled on front door]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Bell.BellEnabledOnTopBoxDoor">
            <summary>
            Gets or sets a value indicating whether [bell enabled on top box door].
            </summary>
            <value>
            	<c>true</c> if [bell enabled on top box door]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Bell.BellEnabledOnSpareDoor">
            <summary>
            Gets or sets a value indicating whether [bell enabled on spare door].
            </summary>
            <value>
            	<c>true</c> if [bell enabled on spare door]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Bell.BellEnabledOnCardCageDoor">
            <summary>
            Gets or sets a value indicating whether [bell enabled on card cage door].
            </summary>
            <value>
            	<c>true</c> if [bell enabled on card cage door]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Bell.StopBellOnDoorCloses">
            <summary>
            Gets or sets a value indicating whether [stop bell on door closes].
            </summary>
            <value>
            	<c>true</c> if [stop bell on door closes]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Bell.BellEnabledOnHandpays">
            <summary>
            Gets or sets a value indicating whether [bell enabled on handpays].
            </summary>
            <value>
            	<c>true</c> if [bell enabled on handpays]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Bell.BellAlarmStyle">
            <summary>
            Gets or sets the bell alarm style.
            </summary>
            <value>
            The bell alarm style.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Machine">
            <summary>
            Class which returns Machine Config items
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Machine.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi)">
            <summary>
            Initializes a new instance of the <see cref="T:IGT.PA.Framework.EgmClients.Avp.Machine"/> class.
            </summary>
            <param name="egmApiObj">The egm API obj.</param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Machine.Bell">
            <summary>
            Gets the bell config class
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Machine.ButtonPanel">
            <summary>
            Gets the button panel config class
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Machine.LogMonitoringMode">
            <summary>
            Gets or sets the log monitoring mode.
            </summary>
            <value>
            The log monitoring mode.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Machine.Cabinet">
            <summary>
            Gets the cabinet config class
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Machine.Candle">
            <summary>
            Gets the candle config class
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Machine.CardReader">
            <summary>
            Gets the card reader Config class
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Machine.PlayerLockout">
            <summary>
            Gets the player lockout config class
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Machine.Sound">
            <summary>
            Gets the sound config class
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Configure">
            <summary>
            Class for configuring EGM Config Items
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Configure.Protocol``1">
            <summary>
            The instance of the Machine Setup Protocol options.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Configure.Network">
            <summary>
            The instance of the Network Setup
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Configure.SiteID">
            <summary>
            The instance of the SideID Config
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Configure.CertManagement">
            <summary>
            The instance of the CertManagement Config
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Configure.ProtocolControl">
            <summary>
            The instance of the Machine Setup Protocol Money Control.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Configure.Machine">
            <summary>
            The instance of the Machine Setup configuration options.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Configure.Attract">
            <summary>
            The instance of the Machine Attract configuration options.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Configure.CashHandling">
            <summary>
            The instance of the Cash Handling configuration options.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Configure.Game">
            <summary>
            The instance of the Game configuration options.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Configure.MainMenu">
            <summary>
            The instance of the Main Menu configuration options.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Configure.Clock">
            <summary>
            The instance of the Clock
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Configure.MediaDisplay">
            <summary>
            The instance of the Media Display configuration options.
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.AvpMeter">
            <summary>
            Implementation of <see cref="T:IGT.PA.Framework.EgmClients.Interfaces.IMeter"/> for AVP
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.AvpMeter.performUpdateOnRead">
            <summary>
            Should the meter value be updated when a read (to MeterValue) occurs?
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.AvpMeter.subMeters">
            <summary>
            List of Sub-Meters (Avp Meter Blocks)
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeter.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi,System.String,IGT.PA.Framework.EgmClients.Avp.Rpc.MeterType,System.String)">
            <summary>
            Default constructor for AvpMeter
            </summary>
            <param name="api">Reference to the AvpEgmApi class</param>
            <param name="name">Meter Name</param>
            <param name="type">Meter Type</param>
            <param name="path">EGM Path to Meter</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeter.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi,IGT.PA.Framework.EgmClients.Avp.AvpMeter,System.Int32)">
            <summary>
            Sub-Meter constructor
            </summary>
            <param name="api">Reference to the AvpEgmApi class</param>
            <param name="parent">Parent Meter</param>
            <param name="blockOffset">Offset within the meter block</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeter.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi,IGT.PA.Framework.EgmClients.Avp.AvpMeter,System.Int32,System.Int64)">
            <summary>
            Sub-Meter constructor with value
            </summary>
            <param name="api">Reference to the AvpEgmApi class</param>
            <param name="parent">Parent Meter</param>
            <param name="blockOffset">Offset within the meter block</param>
            <param name="value">Value to set this Sub-meter to</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeter.AssignId">
            <summary>
            Assign this meter the next available id value.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeter.ResetId">
            <summary>
            Reset the internal id value that is incremented each time a meter is created.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeter.Update">
            <summary>
            Update the value of this meter from the EGM.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeter.SetValue(System.Int64[])">
            <summary>
            Sets the value of this meter
            </summary>
            <param name="values">meter value</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeter.ResetMeter">
            <summary>
            Reset Meter to Zero. Not currently implemented.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeter.IncrementMeter(System.Int64)">
            <summary>
            Increment Meter's Value. Not currently implemented.
            </summary>
            <param name="incrementAmount"></param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpMeter.IsValid">
            <summary>
            Determine if this meter has been initialized with a valid value
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpMeter.Path">
            <summary>
            EGM Path to Meter
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpMeter.Type">
            <summary>
            EGM Meter Type
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpMeter.MeterValue">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpMeter.RawValues">
            <summary>
            Raw meter values retreived from the EGM on the last update.
            May contain 1 or more values, depending on if this is a block meter or not.
            It may also be null.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpMeter.SubMeters">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpMeter.MeterReset">
            <summary>
            Event notifying the meter value has been reset to zero.
            </summary>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpMeter.MeterChanged">
            <summary>
            Event notifying the meter value has been changed.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpMeter.Name">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpMeter.Code">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpMeter.Id">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpMeter.IsActive">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpMeter.NameChanged">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpMeter.CodeChanged">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpMeter.IdChanged">
            <inheritdoc/>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.CertManagement">
            <summary>
            Class for Certificate management for config items
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.CertManagement.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi)">
            <summary>
            Initializes a new instance of the <see cref="T:IGT.PA.Framework.EgmClients.Avp.CertManagement"/> class.
            </summary>
            <param name="egmApiObj">The egm API obj.</param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CertManagement.CertificateProtocolsEnabled">
            <summary>
            Gets or sets a value indicating whether [certificate protocols enabled].
            </summary>
            <value>
            	<c>true</c> if [certificate protocols enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CertManagement.G2sScepResponderUri">
            <summary>
            Gets or sets the G2S scep responder URI.
            </summary>
            <value>
            The G2S scep responder URI.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CertManagement.G2sOcspResponderUri">
            <summary>
            Gets or sets the G2S ocsp responder URI.
            </summary>
            <value>
            The G2S ocsp responder URI.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CertManagement.G2sChallengePassword">
            <summary>
            Gets or sets the G2S challenge password.
            </summary>
            <value>
            The G2S challenge password.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CertManagement.ScepManualPollingInterval">
            <summary>
            Gets or sets the scep manual polling interval.
            </summary>
            <value>
            The scep manual polling interval.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CertManagement.ScepIdentity">
            <summary>
            Gets or sets the scep identity.
            </summary>
            <value>
            The scep identity.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CertManagement.Country">
            <summary>
            Gets or sets the country.
            </summary>
            <value>
            The country.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CertManagement.StateOrProvince">
            <summary>
            Gets or sets the state or province.
            </summary>
            <value>
            The state or province.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CertManagement.Locality">
            <summary>
            Gets or sets the locality.
            </summary>
            <value>
            The locality.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CertManagement.Organization">
            <summary>
            Gets or sets the organization.
            </summary>
            <value>
            The organization.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CertManagement.OrganizationalUnit">
            <summary>
            Gets or sets the organizational unit.
            </summary>
            <value>
            The organizational unit.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Attract">
            <summary>
            Class for configuring attract
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Attract.GameSpecificAttractsEnabled">
            <summary>
            Gets or sets a value indicating whether [game specific attracts enabled].
            </summary>
            <value>
            	<c>true</c> if [game specific attracts enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Attract.MinutesBeforeInitialAttract">
            <summary>
            Gets or sets the minutes before initial attract.
            </summary>
            <value>
            The minutes before initial attract.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Attract.MinutesBetweenAttracts">
            <summary>
            Gets or sets the minutes between attracts.
            </summary>
            <value>
            The minutes between attracts.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Attract.DaysToDisplayNewGameAttract">
            <summary>
            Gets or sets the days to display new game attract.
            </summary>
            <value>
            The days to display new game attract.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Attract.GameCyclingEnabled">
            <summary>
            Gets or sets a value indicating whether [game cycling enabled].
            </summary>
            <value>
              <c>true</c> if [game cycling enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Attract.IdleSecondsBeforeEnteringMainMenu">
            <summary>
            Gets or sets the idle seconds before entering main menu.
            </summary>
            <value>
            The idle seconds before entering main menu.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Attract.IdleSecondsBeforeExitingMainMenu">
            <summary>
            Gets or sets the idle seconds before exiting main menu.
            </summary>
            <value>
            The idle seconds before exiting main menu.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi)">
            <summary>
            Constructor
            </summary>
            <param name="api">Reference to the AvpEgmApi object</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi,System.Int32,IGT.PA.Framework.EgmClients.Avp.AvpPaytable)">
            <summary>
            Constructor
            </summary>
            <param name="api">Reference to the AvpEgmApi object</param>
            <param name="index">Game Index</param>
            <param name="paytable">Game Paytable</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.Update(IGT.PA.Framework.EgmClients.Avp.AvpPaytable)">
            <summary>
            Refreshes the internal data with information from the paytable.
            </summary>
            <param name="paytable"></param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.Enable">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.Disable">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.SetDenoms(System.Int32[])">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.Activate(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.Paytable">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.BonusGames">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.FeatureGames">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.EnabledDenominations">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.Denominations">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.ActiveDenomination">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.SupportsDoubleUp">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.DoubleUpEnabled">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.Name">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.Code">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.Id">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.IsActive">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.NameChanged">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.CodeChanged">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpGameVariation.IdChanged">
            <inheritdoc/>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Utility.ImageExtensions">
            <summary>
            Extensions for more easily working with images.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.ImageExtensions.Multiply(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Multiple two images together.
            </summary>
            <param name="i1">Image 1</param>
            <param name="i2">Image 2</param>
            <returns>Flattened Image</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.ImageExtensions.SetOpacity(System.Drawing.Image,System.Single)">
            <summary>
            Set the opacity or alpha of an image.
            </summary>
            <param name="imgPic">Base image</param>
            <param name="imgOpac">Alpha value [0-1]</param>
            <returns>New Image</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.ImageExtensions.Draw(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Draws source image onto target.
            </summary>
            <param name="target">Base Image</param>
            <param name="source">Overlay Image</param>
            <returns>Modified base image</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.ImageExtensions.Resize(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Resize image, maintaining aspect ratio.
            </summary>
            <param name="imgToResize">Source image</param>
            <param name="size">Target size</param>
            <returns>New image</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.ImageExtensions.Crop(System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>
            Crop out a portion of an image, creating a new image.
            </summary>
            <param name="img">Source image</param>
            <param name="cropArea">Area to copy</param>
            <returns>New image</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.ImageExtensions.Crop(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Crop out a portion of an image, creating a new image.
            All image data from (x,y) to end of image will be copied.
            </summary>
            <param name="img"></param>
            <param name="x">X coordinate to crop from</param>
            <param name="y">Y coordinate to crop from</param>
            <returns>New image</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.ImageExtensions.Crop(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crop out a portion of an image, creating a new image.
            A rectangle using x,y and height,width will be croped.
            </summary>
            <param name="img">Base image</param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns>New Image</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.ImageExtensions.Copy(System.Drawing.Image)">
            <summary>
            Creates a full copy of the image. Deeper copy than Image.Clone()
            </summary>
            <param name="original">Original image</param>
            <returns>Copied Image</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.ImageExtensions.ToImage(System.Byte[])">
            <summary>
            Load an Image from a byte array.
            </summary>
            <param name="imageData">Binary image data</param>
            <returns>Image</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.ImageExtensions.GetBytes(System.Drawing.Image)">
            <summary>
            Return an array of bytes representing the Image.
            </summary>
            <param name="baseImage">Base Image</param>
            <returns>Byte data</returns>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem">
            <summary>
            Configuration Item node, used with XML serialzing to load configuration information.
            Also supports filtering based on glob-patterns of SystemVersion.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem.#ctor(System.String,System.String,System.String)">
            <summary>
            ConfigItem constructor
            </summary>
            <param name="name">Name of this node, can be empty</param>
            <param name="configKey">Key used for config lookup, can be empty</param>
            <param name="systemVersion">pattern to match against SystemVersion, can be empty</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem.#ctor(IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem)">
            <summary>
            Copy Constructor
            </summary>
            <param name="item">ConfigItem to copy</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem.Add(IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem)">
            <summary>
            Add a new ConfigItem to the Children
            </summary>
            <param name="item">dfgsdfg Item to add</param>
            <returns>Added ConfigItem</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem.Add(System.String,System.String,System.String)">
            <summary>
            Add a new ConfigItem to the Children
            </summary>
            <param name="name">Name of this node</param>
            <param name="configKey">dfgsdfg value to load from EGM</param>
            <param name="systemVersion">Glob-style pattern to match for SystemVersion</param>
            <returns>Added ConfigItem</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem.Prune(System.String)">
            <summary>
            Removes all Child nodes who's SystemVersion does not match.
            </summary>
            <param name="systemVersion">SystemVersion to match</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem.ToXDocument(System.Func{System.String,System.String})">
            <summary>
            Creates an XDocument based on ConfigItems
            </summary>
            <param name="getConfigValue">Function to use for config value lookups</param>
            <returns>XDocument</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem.ToXElements(System.Func{System.String,System.String})">
            <summary>
            Recursively load config values and build XElements of this node and Children.
            </summary>
            <param name="getConfigValue">Function for configKey lookups</param>
            <returns>Array of XElements</returns>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem.Name">
            <summary>
            Name of the node.
            Can be used empty/null as a filter node.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem.ConfigKey">
            <summary>
            dfgsdfg Item to load from the EGM.
            If empty/null, no value will be used.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem.ArrayName">
            <summary>
            Name of tag used to wrap array items
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem.ItemType">
            <summary>
            ConfigItem's Type
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem.SystemVersion">
            <summary>
            Glob-style Pattern to match to enable this, and sub-nodes.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem.Children">
            <summary>
            Sub-nodes of ConfigItems
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem.ConfigItemType">
            <summary>
            Type of dfgsdfg Item
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem.ConfigItemType.String">
            <summary>
            Standard string type config item
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.Serialization.ConfigItem.ConfigItemType.Array">
            <summary>
            Array based config item
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.AvpConfigChangedEventArgs">
            <summary>
            Event information tied to a configuration item changed event
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpConfigChangedEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpConfigChangedEventArgs.ConfigName">
            <summary>
            Name of the configuration item that has changed.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpConfigChangedEventArgs.UniqueId">
            <summary>
            The uniqueId of the configuration item that has changed.
            </summary>
            <remarks>
            UniqueIds are like a category or grouping of configuration items.
            There are 3 main types of uniqueIds:
                empty ("") referrs to the system level.
                theme identifier, which contains configuration items for a specific theme.
                game identifier, which contains configuration items for a specifiic game (theme and paytable).
            </remarks>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpConfigChangedEventArgs.Value">
            <summary>
            The new value of the configuration item, as a string.
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Clock">
            <summary>
            Class for configuring clock settings
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Clock.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi)">
            <summary>
            Initializes a new instance of the <see cref="T:IGT.PA.Framework.EgmClients.Avp.Clock"/> class.
            </summary>
            <param name="egmClient">The egm client.</param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Clock.OverRideNtpInDhcp">
            <summary>
            Gets or sets a value indicating whether [over ride NTP in DHCP].
            </summary>
            <value>
              <c>true</c> if [over ride NTP in DHCP]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Clock.NtpServerOne">
            <summary>
            Gets or sets the NTP server one.
            </summary>
            <value>
            The NTP server one.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Clock.NtpServerTwo">
            <summary>
            Gets or sets the NTP server two.
            </summary>
            <value>
            The NTP server two.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Clock.NtpServerThree">
            <summary>
            Gets or sets the NTP server three.
            </summary>
            <value>
            The NTP server three.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Clock.ClockTimeZoneIndex">
            <summary>
            Gets or sets the index of the clock time zone.
            </summary>
            <value>
            The index of the clock time zone.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Clock.CurrentTime">
            <summary>
            Gets or sets the current time.
            </summary>
            <value>
            The current time.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Serialization.AvpMeterInfo">
            <summary>
            Class used to serialize AVP meter information from XML.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Serialization.AvpMeterInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Serialization.AvpMeterInfo.#ctor(System.String,System.String,IGT.PA.Framework.EgmClients.Avp.Rpc.MeterType)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of the meter</param>
            <param name="path">Path to the meter (in safe storage)</param>
            <param name="type">Type of meter</param>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.Serialization.AvpMeterInfo.AISpecific">
            <summary>
            Allows overriding path of meter for a specific AI version.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Serialization.AvpMeterInfo.Name">
            <summary>
            Name of the meter
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Serialization.AvpMeterInfo.Path">
            <summary>
            Path to the meter (in safe storage)
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Serialization.AvpMeterInfo.Expression">
            <summary>
            Expression to evaluate for this meter instead of reading value directly from EGM.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Serialization.AvpMeterInfo.Type">
            <summary>
            Type of meter
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.VoucherInOutProtocol">
            <summary>
            Class which controls Voucher Control for SAS
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.VoucherInOutProtocol.SetGeneralControlConfigItem(System.String,IGT.PA.Framework.EgmClients.Interfaces.Enumerations.ProtocolControlSettings)">
            <summary>
            Function to simplify sending commands to EGM
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.VoucherInOutProtocol.GetGeneralControlConfigItem(System.String)">
            <summary>
            Function to simplify recieving commands to EGM
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.VoucherInOutProtocol.GetProtocolInstance(System.String)">
            <summary>
            Gets Prptocol Type and returns to parameter
            return Protocol Type
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.VoucherInOutProtocol.GetValidation(System.String)">
            <summary>
            Parameter Gets Validation Type based on instance
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.VoucherInOutProtocol.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi)">
            <summary>
            class requires AvpEgmApi
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.VoucherInOutProtocol.ControlProtocol">
            <summary>
            Parameter Gets and Sets Voucher Protocol Types
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.VoucherInOutProtocol.ValidationStyle">
            <summary>
            Parameter Gets and Sets Validation Style
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.VoucherInOutProtocol.AcceptVouchers">
            <summary>
            Parameter Gets and Sets ability to accept vouchers
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.VoucherInOutProtocol.RejectVouchersLessThanOneCredit">
            <summary>
            Parameter Gets and Sets ability reject Vouchers Less than one credit
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.VoucherInOutProtocol.PrintVouchers">
            <summary>
            Parameter Gets and Sets ability print cashout Vouchers
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.VoucherInOutProtocol.MaxVoucherEscrowTime">
            <summary>
            Gets or sets the max voucher escrow time.
            </summary>
            <value>
            The max voucher escrow time.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.VoucherInOutProtocol.PrintVouchersForRestrictedPromoAmount">
            <summary>
            Parameter Gets and Sets ability print Restricted Promo Ammounts
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.VoucherInOutProtocol.PrintVouchersForForeignRestrictedAmount">
            <summary>
            Parameter Gets and Sets ability print Foreign Restricted Amounts
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.VoucherInOutProtocol.ValidateHandpays">
            <summary>
            Parameter Gets and Sets ability Validate Handpays
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.VoucherInOutProtocol.PrintValidationReceipts">
            <summary>
            Parameter Gets and Sets ability Print Validation Receipts
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.AFTBonusProtocol">
            <summary>
            Class which AFT Bonus Protocol Settings
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AFTBonusProtocol.SetGeneralControlConfigItem(System.String,IGT.PA.Framework.EgmClients.Interfaces.Enumerations.ProtocolControlSettings)">
            <summary>
            Command For setting general config Items
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AFTBonusProtocol.GetGeneralControlConfigItem(System.String)">
            <summary>
            Command For getting general config Items
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AFTBonusProtocol.GetProtocolInstance(System.String)">
            <summary>
            Gets Prptocol Type and returns to parameter
            return Protocol Type
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AFTBonusProtocol.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi)">
            <summary>
            Contructor requires AVpEgmApi
            </summary>
            <param name="api"></param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AFTBonusProtocol.ControlProtocol">
            <summary>
            Control Protocol For Aft Bonus Types
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AFTBonusProtocol.AFTEnabled">
            <summary>
            Parameter Which enables AFT
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AFTBonusProtocol.EGMAssetNumber">
            <summary>
            Parameter to Get and Set the Asset Number
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AFTBonusProtocol.ExternalBonusWinLimit">
            <summary>
            Parameter To Get and Set the Externam Bonus Win limit
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.AFTDebitProtocol">
            <summary>
            Class which AFT Debit Protocol Settings
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AFTDebitProtocol.SetGeneralControlConfigItem(System.String,IGT.PA.Framework.EgmClients.Interfaces.Enumerations.ProtocolControlSettings)">
            <summary>
            General function to send commands to EGM
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AFTDebitProtocol.GetGeneralControlConfigItem(System.String)">
            <summary>
            General function to receive commands to EGM
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AFTDebitProtocol.GetProtocolInstance(System.String)">
            <summary>
            General function to send commands to EGM
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AFTDebitProtocol.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi)">
            <summary>
            Constructor for Config item
            returns int
            <returns>void</returns>
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AFTDebitProtocol.ControlProtocol">
            <summary>
            Control Protocol for AFT Debit Setting
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AFTDebitProtocol.AFTEnabled">
            <summary>
            Parameter to Enable AFT
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AFTDebitProtocol.EGMAssetNumber">
            <summary>
            Parameter To Set Asset number
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AFTDebitProtocol.TransferToTicket">
            <summary>
            Parameter to Transfer to ticket
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AFTDebitProtocol.PartialTransfers">
            <summary>
            Parameter to get and set Partial Transfers
            Returns Bool
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AFTDebitProtocol.PrintTransferReceipts">
            <summary>
            Parameter to Print Transfer Receits
            returns bool
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AFTDebitProtocol.PointOfSaleDeviceID">
            <summary>
            Parameter to set ID for Point of Sale
            returns int
            <returns>int</returns>
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.AFTInHouseProtocol">
            <summary>
            Class for AFT In House Protocol Settings
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AFTInHouseProtocol.SetGeneralControlConfigItem(System.String,IGT.PA.Framework.EgmClients.Interfaces.Enumerations.ProtocolControlSettings)">
            <summary>
            General Set command instruction for sending config items
            </summary>
            <param name="commandBlock"></param>
            <param name="value"></param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AFTInHouseProtocol.GetGeneralControlConfigItem(System.String)">
            <summary>
            General Get command instruction for sending config items
            </summary>
            <param name="commandBlock"></param>
            <param name="value"></param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AFTInHouseProtocol.GetProtocolInstance(System.String)">
            <summary>
            Gets Protocol enum from string
            </summary>
            <returns>ProtocolEnum</returns>
            <param name="instanceIn"></param>
            <returns>ProtocolControlSettings</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AFTInHouseProtocol.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi)">
            <summary>
            Constructor for AFT In House
            </summary>
            <param name="api"></param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AFTInHouseProtocol.ControlProtocol">
            <summary>
            Aft In House Protocol Control
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AFTInHouseProtocol.AFTEnabled">
            <summary>
            Parameter to get and set enabling AFT
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AFTInHouseProtocol.PrintTransferReceipts">
            <summary>
            Parameter enable printing transfer receipts
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AFTInHouseProtocol.TransferToTicket">
            <summary>
            Parameter to enable Transfering to ticket
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AFTInHouseProtocol.PartialTransfers">
            <summary>
            Parameter to enable partial transfers
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AFTInHouseProtocol.EGMAssetNumber">
            <summary>
            Parameter to set and get Asset Number
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.HandpayResetsProtocol">
            <summary>
            Class to Control Handpay Settings
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.HandpayResetsProtocol.SetGeneralControlConfigItem(System.String,IGT.PA.Framework.EgmClients.Interfaces.Enumerations.ProtocolControlSettings)">
            <summary>
            General command for sending AVP set commands
            </summary>
            <param name="commandBlock"></param>
            <param name="value"></param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.HandpayResetsProtocol.GetGeneralControlConfigItem(System.String)">
            <summary>
            General command for sending AVP get commands
            </summary>
            <param name="commandBlock"></param>
            <param name="value"></param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.HandpayResetsProtocol.GetProtocolInstance(System.String)">
            <summary>
            method that returns protocol type based off of string
            </summary>
            <param name="instanceIn"></param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.HandpayResetsProtocol.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi)">
            <summary>
            Constructor for Handpay Reset class
            </summary>
            <param name="api"></param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.HandpayResetsProtocol.ControlProtocol">
            <summary>
            Controls Protocol Type for Handpay Resets
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.HandpayResetsProtocol.AllowHandPayReset">
            <summary>
            Parameter which enables handpay resets
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.HandpayResetsProtocol.AllowJackpotReset">
            <summary>
            Parameter which allows jackpot resets to occur
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.HandpayResetsProtocol.MaxHandPayResetToCredits">
            <summary>
            Parameter which gets and sets Reset to credit amounts
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.LegacyBonusProtocol">
            <summary>
            Class for configuring the legacy bonus protocol
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.LegacyBonusProtocol.SetGeneralControlConfigItem(System.String,IGT.PA.Framework.EgmClients.Interfaces.Enumerations.ProtocolControlSettings)">
            <summary>
            General command formating for sending set config instructions
            </summary>
            <param name="commandBlock"></param>
            <param name="value"></param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.LegacyBonusProtocol.GetGeneralControlConfigItem(System.String)">
            <summary>
            General command formating for sending get config instructions
            </summary>
            <param name="commandBlock"></param>
            <param name="value"></param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.LegacyBonusProtocol.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi)">
            <summary>
            Constructir for Legacy Bonus Protocol
            </summary>
            <param name="api"></param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.LegacyBonusProtocol.ControlProtocol">
            <summary>
            Protocol Control for Legacy bonus
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.LegacyBonusProtocol.ExternalBonusWinLimit">
            <summary>
            Parameter for Setting and gettings External bonus amounts
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.ProgressiveProtocol">
            <summary>
            Class for Configuring Progressive protocol
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProgressiveProtocol.SASProgressiveGroup">
            <summary>
            Parameter for configuring Sas Progressive group ammount
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProgressiveProtocol.AllowGamePlayWhileLinkDown">
            <summary>
            Gets and Sets Game playable while link is donwn
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProgressiveProtocol.DisplaySASProgressiveAmounts">
            <summary>
            Gets and sets displaying of progressive ammounts
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProgressiveProtocol.CombineProgressivePrizes">
            <summary>
            Gets and sets combining of Progressive prizes
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.ExchangeRateProtocol">
            <summary>
            Class which handles control of Exchange Rate Protocol
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ExchangeRateProtocol.AskToApproveExchangeRates">
            <summary>
            Parameter to enable Approving of exchange rates
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.WatProtocols">
            <summary>
            Class which Controlls Wat Protocol control
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.WatProtocols.TransferToTicket">
            <summary>
            Parameter to control enabling of transfer to ticket
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.WatProtocols.TransferFundsToHost">
            <summary>
            Parameter to control transfering to host
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.LegacyMeterChangeProtocol">
            <summary>
            Class which controls Legacy Meter Protocol
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.LegacyMeterChangeProtocol.ControlProtocol">
            <summary>
            Gets and sets Legacy Meter Protocol Control
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.RemoteConfigurationProtocol">
            <summary>
            Class which controls Remote configuration protocol
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.RemoteConfigurationProtocol.ControlProtocol">
            <summary>
            Protocol Control for Remote configuration
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.DownloadProtocol">
            <summary>
            Class which controls download protocol settings
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.DownloadProtocol.ControlProtocol">
            <summary>
            Protocol Control for Download Protocol 
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.BillValSetupProtocol">
            <summary>
            Class which controls Bill Validator Protocol settings
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.BillValSetupProtocol.ControlProtocol">
            <summary>
            Controls bill Validator Protocol type
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.CoinAcceptorProtocol">
            <summary>
            Class which controls Coin Acceptor Protocol Settings
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.CoinAcceptorProtocol.ControlProtocol">
            <summary>
            Parameter for Controlling Coin Acceptor protocol type
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.HopperProtocol">
            <summary>
            Class for configuring Hopper Protocol
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.HopperProtocol.ControlProtocol">
            <summary>
            Parameter for controlling Protocol Type settings for Hopper
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.EFTToMachineProtocol">
            <summary>
            Class for controlling EFT Protocol settings
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.EFTToMachineProtocol.ControlProtocol">
            <summary>
            Parameter to control Protocol Stype for EFT to Machine
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.PrinterProtocol">
            <summary>
            Class for controlling Printer protocol settings
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.PrinterProtocol.ControlProtocol">
            <summary>
            Parameter for controlling printer Paramter Protocol Type
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.ClockProtocol">
            <summary>
            Class for controlling Clock settings
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ClockProtocol.ControlProtocol">
            <summary>
            Parameter for controlling protocol type for clock
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.ProtocolControl">
            <summary>
            Class for configuring Protocol Settings related to protocol control pages
            AVP names this Advanced
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.SetGeneralControlConfigItem(System.String,IGT.PA.Framework.EgmClients.Interfaces.Enumerations.ProtocolControlSettings)">
            <summary>
            Sets the general control config item.
            </summary>
            <param name="commandBlock">The command block.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.GetGeneralControlConfigItem(System.String)">
            <summary>
            Gets the general control config item.
            </summary>
            <param name="commandBlock">The command block.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.GetProtocolInstance(System.String)">
            <summary>
            Gets the protocol instance.
            </summary>
            <param name="instanceIn">The instance in.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi)">
            <summary>
            Initializes a new instance of the <see cref="T:IGT.PA.Framework.EgmClients.Avp.ProtocolControl"/> class.
            </summary>
            <param name="egmApi">The egm API.</param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.WattProtocol">
            <summary>
            Gets the watt protocol.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.VoucherInOutProtocol">
            <summary>
            Gets the voucher in out protocol.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.AFTBonusProtocol">
            <summary>
            Gets the AFT bonus protocol.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.AFTDebitProtocol">
            <summary>
            Gets the AFT debit protocol.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.AFTInHouseProtocol">
            <summary>
            Gets the AFT in house protocol.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.HandpayResetsProtocol">
            <summary>
            Gets the handpay resets protocol.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.LegacyBonusingProtocol">
            <summary>
            Gets the legacy bonusing protocol.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.ProgressiveProtocol">
            <summary>
            Gets the progressive protocol.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.ExchangeRateProtocol">
            <summary>
            Gets the exchange rate protocol.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.EFTToMachineProtocol">
            <summary>
            Gets the EFT to machine protocol.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.LegacyMeterChangeProtocol">
            <summary>
            Gets the legacy meter change protocol.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.RemoteProtocol">
            <summary>
            Gets the remote configuration protocol.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.DownloadProtocol">
            <summary>
            Gets the download protocol.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.BillValSetupProtocol">
            <summary>
            Gets the bill val setup protocol.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.CoinAcceptorProtocol">
            <summary>
            Gets the coin acceptor protocol.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.HopperProtocol">
            <summary>
            Gets the hopper protocol.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.PrinterProtocol">
            <summary>
            Gets the printer protocol.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.ProtocolControl.ClockProtocol">
            <summary>
            Gets the clock protocol.
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.AvpMeterManager">
            <summary>
            Class to manage the Meter objects for an AVP EGM.
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.AvpMeterManager.meterRegex">
            <summary>
            Used for variable replacement in meter xml file.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeterManager.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi)">
            <summary>
            Constructor
            </summary>
            <param name="api">AvpEgmApi reference</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeterManager.Clear">
            <summary>
            Clear cached data
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeterManager.RebuildMeters">
            <summary>
            Reload and Rebuilt the AvpMeter objects based on the currently connected EGM.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeterManager.GetMetersByPattern(System.String)">
            <summary>
            GetBank all meters matching the specified Glob pattern.
            </summary>
            <param name="wildcard">Glob pattern to match meters</param>
            <returns>list of matching meters</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeterManager.GetMeterByName(System.String)">
            <summary>
            Returns the first meter with the specified name.
            </summary>
            <param name="name">Meter Name</param>
            <returns>IMeter</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeterManager.GetMeterData">
            <summary>
            Loads AvpMeterInfo values from the XML file specified by XmlMeterPath
            </summary>
            <returns>List of <see cref="T:IGT.PA.Framework.EgmClients.Avp.Serialization.AvpMeterInfo"/></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeterManager.HandleMeterInfo(IGT.PA.Framework.EgmClients.Avp.Serialization.AvpMeterInfo,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Process a AvpMeterInfo object, adding the appropriate AvpMeter objects.
            This does some preprocessing on names and paths including:
            1. replacing {Foo,Bar} with two copies of the meter, one using Foo, the other using Bar.
            2. It will also replace {GameID} with meters for every GameId installed on the EGM.
            </summary>
            <param name="meterInfo">meter information object</param>
            <param name="systemVersion">EGM System Version (Used to filter meters)</param>
            <param name="gameIdentifiers">list of gameIdentifiers to be used in replacing {GameID}</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeterManager.IndexMeters">
            <summary>
            Index meter names for use with expressions.
            The indexed name has invalid characters replaced with an underscore.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeterManager.EvaluateExpression(System.String)">
            <summary>
            Uses the FLEE library to evaluate the string expression.
            Variables names referenced are looked as if they were other meters.
            </summary>
            <param name="expression">math expression to evaluate</param>
            <returns>long value</returns>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpMeterManager.XmlMeterPath">
            <summary>
            Path from which to load the XML Meter Data.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpMeterManager.Meters">
            <summary>
            List of AVP Meters
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Support.Glob">
            <summary>
            Glob class used from IronRuby.
            File functionality removed.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Support.Glob.#ctor(System.String)">
            <summary>
            Create a glob style pattern matcher
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Support.Glob.IsMatch(System.String)">
            <summary>
            Determine if input is a match for glob-style pattern
            </summary>
            <param name="inputText">input string to determine match</param> 
            <returns>true if match</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Support.Glob.IsMatch(System.String,System.String)">
            <summary>
            Determine if input is a match for glob-style pattern
            </summary>
            <param name="input">input string to determine match</param>
            <param name="pattern">glob-style pattern</param>
            <returns>true if match</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Support.Glob.PatternToRegex(System.String,System.Boolean,System.Boolean)">
            <summary>
            Takes a glob-style pattern and converts it into a regex pattern.
            </summary>
            <param name="pattern">Glob-style pattern</param>
            <param name="pathName">Is this a path name, changes the way '/' is handled</param>
            <param name="noEscape">Turn off the ability to escape special characters</param>
            <returns>Regex style pattern</returns>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Support.Glob.CharClass">
            <summary>
            Support class
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Enumerations.AvpButtonIndex">
            <summary>
            Map common button names to avp button indexes
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.AvpSwitch">
            <summary>
            Implementation of <see cref="T:IGT.PA.Framework.EgmClients.Interfaces.ISwitch"/> for AVP
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.avpApi">
            <summary>
             Reference to Egm Api class
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.switchType">
            <summary>
            Type of this switch
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.lastChange">
            <summary>
            Last time the switch state changed
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.considerCycleLength">
            <summary>
            Seconds in which to assume that a Cycle of the switch has occured.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi,IGT.PA.Framework.EgmClients.Interfaces.Enumerations.SwitchType)">
            <summary>
            Default constructor of AvpSwitch (implements ISwitch)
            </summary>
            <param name="api">AvpEgmApi</param>
            <param name="type">Switch Type</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.AvpApi_SwitchEvent(System.Object,IGT.PA.Framework.EgmClients.Interfaces.SwitchEventArgs)">
            <summary>
            Event handler for the Switch Event. 
            Use this to update our internal state of the switch.
            </summary>
            <param name="sender">AvpEgmApi</param>
            <param name="e">Switch EventArgs</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.TurnOn">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.TurnOff">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.Toggle">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.Cycle">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.IsOn">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.SwitchOn">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.SwitchOff">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.SwitchToggled">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.SwitchCycled">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.Name">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.Code">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.Id">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.IsActive">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.NameChanged">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.CodeChanged">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpSwitch.IdChanged">
            <inheritdoc/>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.AvpFeatureGame">
            <summary>
            Describes the information pertaining to a feature game.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpFeatureGame.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpFeatureGame.Name">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpFeatureGame.Code">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpFeatureGame.Id">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpFeatureGame.IsActive">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpFeatureGame.NameChanged">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpFeatureGame.CodeChanged">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpFeatureGame.IdChanged">
            <inheritdoc/>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Protocols.EgmProtocol">
            <summary>
            Generic protocol class to share methods
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Protocols.EgmProtocol.GetComBoardEnum(System.String)">
            <summary>
            returns com board enumeration for specified board
            </summary>
            <param name="boardType"></param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Protocols.EgmProtocol.GetClassType(System.Type)">
            <summary>
            Returns Class type for identfying protocol class
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.EgmProtocol.Enabled">
            <summary>
            Parameter for Generic Enable for protocol 
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.EgmProtocol.ComBoardType">
            <summary>
            Paramater Generic comboardType for protocols use
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.EgmProtocol.MinResponseTime">
            <summary>
            Parameter Minimum response time for generic protocol
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.EgmProtocol.Apix">
            <summary>
            Allows Templated class access to AvpEGM Api
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2">
            <summary>
            Protocol SAS 2 Specific settings class
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.SetGeneralEnableConfigItem(System.Type,System.String,System.Boolean)">
            <summary>
            Sets the general enable config item.
            </summary>
            <param name="t">The t.</param>
            <param name="commandBlock">The command block.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.GetGeneralEnableConfigItem(System.Type,System.String)">
            <summary>
            Gets the general enable config item.
            </summary>
            <param name="t">The t.</param>
            <param name="commandBlock">The command block.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2"/> class.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.GeneralControlAllowed">
            <summary>
            Parameter for General Protocol Control enabled
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.IndividualChangeAllowed">
            <summary>
            Parameter for enabling individual changes for protocol
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.InterbyteTimeout">
            <summary>
            Paramter to Control Interbyte Timeout
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.ReportAccountingDenomAmounts">
            <summary>
            Parameter to control Enabling of Reporting Accounting Amounts
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.HostSoundSetupEnable">
            <summary>
            Parameter to control if Host Sound Setup Enabled
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.AssertDTR">
            <summary>
            Paramter to enable DTR
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.AssertRTS">
            <summary>
            Paramter to enable RTS
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.SecureHandPayEnable">
            <summary>
            Paramter to enable Secure Handpay
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.ExceptionFilterEnable">
            <summary>
            Parameter to Enable Exception Filtering
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.RomSignaturesInWritableMedia">
            <summary>
            Parameter to Enable Rom Signature Used for writable media
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.InterByteTimeout">
            <summary>
            Parameter to enable Interbyte Timeout
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.DisableMachineIfHostLinkDown">
            <summary>
            Parameter to Disable Machine if Host Link is down
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.DisableMachineIfHostLinkInactive">
            <summary>
            Parameter to Disable Machine if Host Link is inactive
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.DisableMachineIfSecurityBufferFull">
            <summary>
            Paramter to Disable Machine if Security Buffer is fu
            </summary>
            <value>
            	<c>true</c> if [disable machine if security buffer full]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.WaitForHostToEnableAfterStart">
            <summary>
            Gets or sets a value indicating whether [waitfor host to enable after start].
            </summary>
            <value>
            	<c>true</c> if [waitfor host to enable after start]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.DisableMachineIfNackCountReachesZero">
            <summary>
            Gets or sets a value indicating whether [disable machineif nack count reaches zero].
            </summary>
            <value>
            	<c>true</c> if [disable machineif nack count reaches zero]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas2.UseEntireMsgDuringDupCheck">
            <summary>
            Gets or sets a value indicating whether [use entire MSG durring dup check].
            </summary>
            <value>
            	<c>true</c> if [use entire MSG durring dup check]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Protocols.ProtocolWap7">
            <summary>
            Generic ProtocoWap7 Type Class
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Protocols.ProtocolWap7.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IGT.PA.Framework.EgmClients.Protocols.ProtocolWap7"/> class.
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Protocols.ProtocolPP">
            <summary>
            Generic ProtocoPPType Class
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Protocols.ProtocolType25">
            <summary>
            Generic ProtocoPPType25 Class
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Protocols.ProtocolG2s">
            <summary>
            Protocol G2s Class for setting configs
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Protocols.ProtocolG2s.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IGT.PA.Framework.EgmClients.Protocols.ProtocolG2s"/> class.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolG2s.G2sHostMachineProtocol">
            <summary>
            Gets or sets the G2S machine protocol.
            </summary>
            <value>
            The G2S machine protocol.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolG2s.G2sHostMachineIp">
            <summary>
            Gets or sets the G2S machine ip.
            </summary>
            <value>
            The G2S machine ip.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolG2s.LegacyMeterChangeSetting">
            <summary>
            Gets or sets a value indicating whether [legacy meter change setting].
            </summary>
            <value>
            	<c>true</c> if [legacy meter change setting]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolG2s.DoorStatusDisallowsIdleState">
            <summary>
            Gets or sets a value indicating whether [door status disallows idle state].
            </summary>
            <value>
            	<c>true</c> if [door status disallows idle state]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolG2s.PostConfigurationDelay">
            <summary>
            Gets or sets the post configuration delay.
            </summary>
            <value>
            The post configuration delay.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolG2s.MaxHostsAllowed">
            <summary>
            Gets or sets the max hosts allowed.
            </summary>
            <value>
            The max hosts allowed.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolG2s.G2SMachineID">
            <summary>
            Gets or sets the g2 S machine ID.
            </summary>
            <value>
            The g2 S machine ID.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolG2s.G2sMachineProtocolUrl">
            <summary>
            Gets or sets the g2 S machine protocol URL.
            </summary>
            <value>
            The g2 S machine protocol URL.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolG2s.G2SMachineIP">
            <summary>
            Gets or sets the g2 S machine IP.
            </summary>
            <value>
            The g2 S machine IP.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolG2s.G2SMachinePort">
            <summary>
            Gets or sets the g2 S machine port.
            </summary>
            <value>
            The g2 S machine port.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolG2s.G2SHostNetworkID">
            <summary>
            Gets or sets the g2 S host network ID.
            </summary>
            <value>
            The g2 S host network ID.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolG2s.G2sHostProtocolUrl">
            <summary>
            Gets or sets the g2 S host protocol URL.
            </summary>
            <value>
            The g2 S host protocol URL.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolG2s.G2SHostAddress">
            <summary>
            Gets or sets the g2 S host address.
            </summary>
            <value>
            The g2 S host address.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolG2s.G2SBonusingEnabled">
            <summary>
            Gets or sets a value indicating whether [g2 S bonusing enabled].
            </summary>
            <value>
              <c>true</c> if [g2 S bonusing enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolG2s.DhcpOverride">
            <summary>
            Gets or sets a value indicating whether [DHCP override].
            </summary>
            <value>
              <c>true</c> if [DHCP override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas">
            <summary>
            Protocol SAS Class for setting configs
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.SetGeneralEnableConfigItem(System.Type,System.String,System.Boolean)">
            <summary>
            Sets the general enable config item.
            </summary>
            <param name="t">The t.</param>
            <param name="commandBlock">The command block.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.GetGeneralEnableConfigItem(System.Type,System.String)">
            <summary>
            Gets the general enable config item.
            </summary>
            <param name="t">The t.</param>
            <param name="commandBlock">The command block.</param>
            <returns></returns>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.GeneralControlAllowed">
            <summary>
            Gets or sets a value indicating whether [general control allowed].
            </summary>
            <value>
            	<c>true</c> if [general control allowed]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.IndividualChangeAllowed">
            <summary>
            Gets or sets a value indicating whether [individual change allowed].
            </summary>
            <value>
            	<c>true</c> if [individual change allowed]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.InterbyteTimeout">
            <summary>
            Gets or sets a value indicating whether [interbyte timeout].
            </summary>
            <value>
              <c>true</c> if [interbyte timeout]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.ReportAccountingDenomAmounts">
            <summary>
            Gets or sets a value indicating whether [report accounting denom ammounts].
            </summary>
            <value>
            	<c>true</c> if [report accounting denom ammounts]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.HostSoundSetupEnable">
            <summary>
            Gets or sets a value indicating whether [host sound setup enable].
            </summary>
            <value>
            	<c>true</c> if [host sound setup enable]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.AssertDTR">
            <summary>
            Gets or sets a value indicating whether [assert DTR].
            </summary>
            <value>
              <c>true</c> if [assert DTR]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.AssertRTS">
            <summary>
            Gets or sets a value indicating whether [assert RTS].
            </summary>
            <value>
              <c>true</c> if [assert RTS]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.SecureHandPayEnable">
            <summary>
            Gets or sets a value indicating whether [secure hand pay enable].
            </summary>
            <value>
            	<c>true</c> if [secure hand pay enable]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.ExceptionFilterEnable">
            <summary>
            Gets or sets a value indicating whether [exception filter enable].
            </summary>
            <value>
            	<c>true</c> if [exception filter enable]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.RomSignaturesInWritableMedia">
            <summary>
            Gets or sets a value indicating whether [rom signatures in writable media].
            </summary>
            <value>
            	<c>true</c> if [rom signatures in writable media]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.InterByteTimeout">
            <summary>
            Gets or sets a value indicating whether [inter byte timeout].
            </summary>
            <value>
              <c>true</c> if [inter byte timeout]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.DisableMachineIfHostLinkDown">
            <summary>
            Gets or sets a value indicating whether [disable machine if host link down].
            </summary>
            <value>
            	<c>true</c> if [disable machine if host link down]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.DisableMachineIfHostLinkInactive">
            <summary>
            Gets or sets a value indicating whether [disable machine if host link inactive].
            </summary>
            <value>
            	<c>true</c> if [disable machine if host link inactive]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.DisableMachineIfSecurityBufferFull">
            <summary>
            Gets or sets a value indicating whether [disable machine if security buffer full].
            </summary>
            <value>
            	<c>true</c> if [disable machine if security buffer full]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.WaitForHostToEnableAfterStart">
            <summary>
            Gets or sets a value indicating whether [waitfor host to enable after start].
            </summary>
            <value>
            	<c>true</c> if [waitfor host to enable after start]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.DisableMachineIfNackCountReachesZero">
            <summary>
            Gets or sets a value indicating whether [disable machineif nack count reaches zero].
            </summary>
            <value>
            	<c>true</c> if [disable machineif nack count reaches zero]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.ProtocolSas.UseEntireMsgDuringDupCheck">
            <summary>
            Gets or sets a value indicating whether [use entire MSG durring dup check].
            </summary>
            <value>
            	<c>true</c> if [use entire MSG durring dup check]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Protocols.Protocol`1">
            <summary>
            Generic Protocol Class takes a Protocol as a Type T and then can 
            Access settings specific to that protocol (i.e ProtocolG2s returns ProtocolG2s settings)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Protocols.Protocol`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IGT.PA.Framework.EgmClients.Protocols.Protocol`1"/> class.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Protocols.Protocol`1.GetClassType(System.Type)">
            <summary>
            Gets the type of the class.
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Protocols.Protocol`1.GetComPortSelection(System.String)">
            <summary>
            Gets the COM port selection.
            </summary>
            <param name="port">The port.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Protocols.Protocol`1.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi)">
            <summary>
            Initializes a new instance of the <see cref="T:IGT.PA.Framework.EgmClients.Protocols.Protocol`1"/> class.
            </summary>
            <param name="egmApi">The egm API.</param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.Protocol`1.Settings">
            <summary>
            Access settings specific to that protocol (i.e ProtocolG2s returns ProtocolG2s settings)
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.Protocol`1.ComPort">
            <summary>
            Gets or sets the COM port.
            </summary>
            <value>
            The COM port.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Protocols.Protocol`1.Poll">
            <summary>
            Gets or sets the poll.
            </summary>
            <value>
            The poll.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventListener">
            <summary>
            Socket listener for receiving and distributing events from the EGM.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventListener.Connect(System.String,System.Int32)">
            <summary>
            Connect to the Event Server of the specified EGM.
            </summary>
            <param name="address">Address of EGM (hostname or IP address)</param>
            <param name="port">Port to connect on, default is 5743</param>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventListener.Disconnect">
            <summary>
            Disconnect from the event server.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventListener.ConnectWithTimeout(System.String,System.Int32,System.Int32)">
            <summary>
            Connect to the Event Server with a specified Connection Timeout.
            Normally tcp connections can take a long time to time out, which should not be an issue on a LAN.
            </summary>
            <param name="address">EGM address (hostname or ip)</param>
            <param name="port">port to connect on, default is 5743</param>
            <param name="msTimeout">timeout in milliseconds</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventListener.InternalDisconnect">
            <summary>
            Disconnect and cleanup.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventListener.ParseEventString(System.String)">
            <summary>
            Parse a string into an Xml event message.
            </summary>
            <param name="message">String containing XML event message</param>
            <returns>XmlEvent on success, null on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventListener.InitWaitHandles">
            <summary>
            Initialize wait handles used to manage event queue and threads
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventListener.DestroyWaitHandles">
            <summary>
            Destroy wait handles associated with threads
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventListener.ProcessEvents">
            <summary>
            Process any events in the event queue
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventListener.HandleEvent(IGT.PA.Framework.EgmClients.Avp.Events.XmlEvent)">
            <summary>
            Add an event to the event queue
            </summary>
            <param name="ev">Event to add</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventListener.NotifyConnected">
            <summary>
            Trigger the Connected event
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventListener.NotifyDisconnect">
            <summary>
            Trigger the Disconnected event
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventListener.NotifyEvent(IGT.PA.Framework.EgmClients.Avp.Events.XmlEvent)">
            <summary>
            Trigger the EventReceived event
            </summary>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventListener.Connected">
            <summary>
            A connection has been established.
            </summary>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventListener.Disconnected">
            <summary>
            A connection has been dropped or disconnected by user.
            </summary>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventListener.EventReceived">
            <summary>
            An event has been received from the EGM.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventListener.IsConnected">
            <summary>
            Determine if a connection is currently established.
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi">
            <summary>
            Implementation of <see cref="T:IGT.PA.Framework.EgmClients.Interfaces.IEgmApi"/> for AVP
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.Listener_Connected(System.Object,System.EventArgs)">
            <summary>
            Event fired when the AvpEventListener connects.
            </summary>
            <param name="sender">AvpEventListener</param>
            <param name="e">empty</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.Listener_Disconnected(System.Object,System.EventArgs)">
            <summary>
            Event fired when the AvpEventListener disconnects.
            </summary>
            <param name="sender">AvpEventListener</param>
            <param name="e">empty</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.Listener_EventReceived(System.Object,IGT.PA.Framework.EgmClients.Avp.Events.AvpEventArgs)">
            <summary>
            Event fired when an event is received
            </summary>
            <param name="sender">AvpEventListener</param>
            <param name="e">EventArgs containing event data from EGM</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.AddEventMapping(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Func{IGT.PA.Framework.EgmClients.Avp.Events.AvpEvent,IGT.PA.Framework.EgmClients.Interfaces.EgmEventArgs})">
            <summary>
            Adds an event mapping for a remote (EGM event) to trigger a local event (EventHandler)
            Given that it matches all conditions (additional data)
            Then uses a function to create the EventArgs to trigger the given event.
            </summary>
            <param name="remoteEventName">Event name from the EGM</param>
            <param name="localEventName">Local event name</param>
            <param name="matchConditions">Dictionary of regexs to match against key/value pairs of incomming event</param>
            <param name="createArgs">If match conditions are met, call this function to generate EventArgs</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.RpcCheckError(System.Action)">
            <summary>
            Used to handle error conditions that can be thrown during RPC calls. 
            This keeps us from duplicating the same error handling code, and 
            allows for changes to be easily made in the way errors are handled.
            </summary>
            <param name="rpcCall">Action containing RPC calls</param>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.RpcCheckError``1(System.Func{``0},``0)">
            <summary>
            Used to handle error conditions that can be thrown during RPC calls. 
            This keeps us from duplicating the same error handling code, and 
            allows for changes to be easily made in the way errors are handled.
            </summary>
            <typeparam name="T">Type expected as return</typeparam>
            <param name="rpcCall">Func which makes RPC calls</param>
            <param name="defaultValue">Default value to return if an error occurs</param>
            <returns>either returns the rpcCall return value, or defaultValue on failure.</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetDynamicConfigData">
            <summary>
            Loads all config items from the config xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.Connect(System.String)">
            <summary>
            Connect to an EGM at a specific address.
            </summary>
            <param name="address">IP address of EGM</param>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.DisableEventServer(System.Boolean)">
            <summary>
            Disables the event server.
            </summary>
            <param name="setDisabled">if set to <c>true</c> [set disabled].</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.Disconnect">
            <summary>
            Disconnect from EGM
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.DisconnectPad">
            <summary>
            Disconnects pad.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.ClearCachedData">
            <summary>
            Clear any specific cached data about the EGM.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.SendCommand(System.String,System.Object[])">
            <summary>
            Not currently implemented.
            </summary>
            <param name="command"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.InsertBill(System.Int32,System.Int32,IGT.PA.Framework.EgmClients.Interfaces.Enumerations.CountryCode)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.InsertCoin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.InsertVoucher(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.InsertPlayerCard(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.RemovePlayerCard">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.AvpTouch(System.Int32,IGT.PA.Framework.EgmClients.Avp.Enumerations.AvpTouchAction,System.Double,System.Double)">
            <summary>
            Wraps the egm proxy touch function
            </summary>
            <param name="screen">screen index (0 = default)</param>
            <param name="action">Action to perform</param>
            <param name="x">x coordinate [-1, 1]</param>
            <param name="y">y coordinate [-1, 1]</param>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.SendMouseClick(System.Double,System.Double)">
            <summary>
            Sends  mouse click
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.TouchScreen(System.Double,System.Double,System.Boolean,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.ReleaseTouchScreen">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetDoorId(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.DoorType)">
            <summary>
            Used to translate IEgmApi Door codes to specific AVP door codes.
            For use with various proxy functions taking a door index.
            </summary>
            <param name="door">DoorType</param>
            <returns>AVP Door Index</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetDoorType(IGT.PA.Framework.EgmClients.Avp.Rpc.Door)">
            <summary>
            Translates an Rpc Door type to an interface DoorType
            </summary>
            <param name="door">Rpc Door</param>
            <returns>DoorType</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetDoorType(System.String)">
            <summary>
            Translates a string name (in an event) to the proper door type.
            </summary>
            <param name="name">string door description</param>
            <returns>DoorType</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.OpenDoor(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.DoorType)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.CloseDoor(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.DoorType)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetDoorState(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.DoorType)">
            <summary>
            Determine the current state of the specified door.
            </summary>
            <param name="door">Door to check</param>
            <returns>Door State</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.IsSwitchActive(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.SwitchType)">
            <summary>
            Determine the current state of the specified switch
            </summary>
            <param name="switchType">Switch to check</param>
            <returns>true if switch is active or depressed</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.DeactivateSwitch(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.SwitchType)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.ActivateSwitch(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.SwitchType)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.ToggleSwitch(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.SwitchType)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.CycleSwitch(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.SwitchType)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.DetectHopperFix">
            <summary>
            Determines if a hopper is enabled, if so assume we need to use the event method for
            sending button events, and adjust appropriatly.
            
            Note: this has an affect on the ability to determine if a button is currently pressed.
            Since we bypass the senet buffer, we will not be able to determine if button is down.
            Only physical button down will cause the bit to be set, and thus cause IsButtonDown to return true.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.PressButton(System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.ReleaseButton(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.CallforService">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.CashOut">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.Spin">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.PlayMaxBet">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.SetReelStops(System.Collections.Generic.List{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.SetRandomNumbers(System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}})">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.ResetRng">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.SetConfigurationInfo(System.Xml.Linq.XDocument)">
            <summary>
            Not currently implemented.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.SetTilt(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.TiltType)">
            <summary>
            Not currently implemented.
            </summary>
            <param name="tiltType"></param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetConfigurationInfo">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetMemoryInfo">
            <summary>
            Gets the memory info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetGameInfo">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetSystemInfo">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetScreenImage">
            <summary>
            Not currently implemented.
            </summary>
            <returns>a screenshot</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetAllMenuMeters">
            <summary>
            Gets all menu meters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.ToggleRng">
            <summary>
            Toggles the RNG.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.IsTestRng">
            <summary>
            Determines whether [is test RNG].
            </summary>
            <returns>
              <c>true</c> if [is test RNG]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.IsRealRng">
            <summary>
            Determines whether [is real RNG].
            </summary>
            <returns>
              <c>true</c> if [is real RNG]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.RngAddSet(System.Int32[])">
            <summary>
            Adds RNG values
            </summary>
            <param name="rngVals">The RNG vals.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetState">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetFileContents(System.String)">
            <summary>
            Gets the file contents.
            </summary>
            <param name="filePath">The file path.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.CopyEgmRegistryFile">
            <summary>
            Copies the egm registry file to the local machine c:\registry.xml
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.ProtocolsInstalled">
            <summary>
            List to Installed Protocols
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetProtocolsInstalled">
            <summary>
            Gets the protocols installed.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.SetFileContents(System.String,System.String)">
            <summary>
            Writes the file contents to AVP - no access - do not use
            </summary>
            <param name="pathOfLocalFile">The path of local file.</param>
            <param name="pathToNewAvpFile">The path to new avp file.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetTilts">
            <summary>
            Returns a list of tilts.
            AVP NOTE: The only tilts we can specifically query for are door open and handpay.
            If a tilt is pending this will add Unknown, as well as either DoorOpen, Handpay or both to the list.
            Unknown could exist because of the Door or Handpay condition, or it could signify other tilts.
            </summary>
            <returns>List of Tilts currently pending</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.SystemSafeStorageClear">
            <summary>
            Clears EGM SafeStorage and Reboots EGM.
            Be careful when calling this function as it wipes EGM data.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.Reboot">
            <summary>
            Reboots EGM.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetConfig(System.String)">
            <summary>
            GetBank the data associated with a configuration item
            </summary>
            <param name="configName">config name to load</param>
            <returns>value of config item, null on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetConfig(System.String[])">
            <summary>
            GetBank the data associated with configuration items
            </summary>
            <param name="configNames">config names to load</param>
            <returns>value of config items, null on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.UpdateConfigCache">
            <summary>
            Update the local cache of all configuration items from the EGM.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetConfigUniqueIds">
            <summary>
            Returns a list of all UniqueIds from the configuration cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetConfigItems(System.String)">
            <summary>
            Return all configuration items with the specified UniqueID
            </summary>
            <param name="uniqueId">Configuration UniqueId</param>
            <returns>List of configIds</returns>
            <remarks>
            On AVP, think of the UniqueID as a category. 
            The system uses an empty string for global configuration.
            GameIdentifiers and ThemeIdentifiers are also used for game/theme specific configuration.
            </remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.LookupConfig(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="configId">Configuration ID</param>
            <param name="uniqueId">Configuration UniqueId</param>
            <returns>String value representation of the config value, null if not found</returns>
            <remarks>
            On AVP, think of the UniqueID as a category. 
            The system uses an empty string for global configuration.
            GameIdentifiers and ThemeIdentifiers are also used for game/theme specific configuration.
            </remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.SetConfig(System.String,System.String,System.String)">
            <summary>
            Set the value of a configuration item.
            </summary>
            <param name="configId">Configuration Item Name</param>
            <param name="uniqueId">Unique ID for the given Configuration Item</param>
            <param name="value">Value to set the configuration item to</param>
            <returns>True if successful</returns>
            <remarks>
            Note that all configuration types may not be supported.
            Some configuration items may also be marked as non-modifiable, and therefore cannot be set.
            </remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetEgmId">
            <summary>
            GetBank the EGM id. (eg. "IGT_00012921BE9E")
            </summary>
            <returns>Egm Id</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetAssetNumber">
            <summary>
            Returns the EGM's Asset number.
            </summary>
            <returns>Asset number</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetCurrentGameIndex">
            <summary>
            GetBank the current Game Index
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetCurrentThemeName">
            <summary>
            Returns the name of the current theme.
            </summary>
            <returns>Theme name</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetAvpState">
            <summary>
            Gets the string description of the current game state.
            </summary>
            <returns>string description of state</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.getDirectories(System.String)">
            <summary>
            Gets the directories.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetAvpPackageName">
            <summary>
            Returns the AVP package name
            </summary>
            <returns>package name, null on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetConfigPackageName">
            <summary>
            Returns the name of the config package.
            </summary>
            <returns>config package name, null on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetAccountingDenom">
            <summary>
            GetBank the accounting denom for the Egm
            </summary>
            <returns>accounting denom, 0 on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetPlayerDenom">
            <summary>
            Gets the currently selected player denom from the Egm.
            </summary>
            <returns>Player denom, 0 on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetWinAmount">
            <summary>
            Returns the win amount of the last game.
            </summary>
            <returns>win amount, -1 on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetPaidMeter">
            <summary>
            Gets the Paid meter.
            </summary>
            <returns>meter value, -1 on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetCurrentCredits">
            <summary>
            Returns the current credits.
            </summary>
            <returns>current credits, -1 on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetGameLoadTime">
            <summary>
            Returns the load time of the current game
            </summary>
            <returns>Load time (ms), 0 on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetTime">
            <summary>
            Returns the current time on the EGM
            </summary>
            <returns>Current time</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.SetTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time.
            </summary>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <param name="offSeconds">The off seconds.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetHistory">
            <summary>
            GetBank the game history
            Do not call while game is being played.
            </summary>
            <returns>List of history entries, null on error</returns>
            <remarks>Temporary until IEgm History interface is complete</remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetCurrentHistorySessionId">
            <summary>
            Determine the current history session id. 
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetPaytableInformation">
            <summary>
            Returns all paytable information
            Note: may take a while, depending on the number of games implemented
            </summary>
            <returns>List of paytable information</returns>
            <remarks>Temporary until IEgm Paytable interface is complete</remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.PressButtonPanel(IGT.PA.Framework.EgmClients.Avp.Enumerations.AvpButtonIndex)">
            <summary>
            Press a button on the AVP Button Panel
            </summary>
            <param name="button">specified button to press and release.</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.SetRealRng">
            <summary>
            Enable the Real RNG on the AVP machine.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.EnableEvents(System.Boolean)">
            <summary>
            Test Enable/Disable the event Server
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.SetTestRng">
            <summary>
            Enable the Test RNG on the AVP machine.
            Make sure to seed values using SetRandomNumbers or SetReelStops
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.IsTestRngEnabled">
            <summary>
            Determine if the Test RNG is enabled.
            </summary>
            <returns>True if game is using the Test RNG</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.ClearRngFilters">
            <summary>
            Clear all callers from the RNG Filter list.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.AddRngFilter(System.String)">
            <summary>
            Add a caller to the Filter List
            </summary>
            <param name="callerId">caller name</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.EnableRngFilter">
            <summary>
            Enable the RNG Filter mechanism.
            This causes certain callers to be filtered to the real RNG.
            Only applies when both the filter and test rng are enabled.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.DisableRngFilter">
            <summary>
            Disable the RNG filter.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetMeters(IGT.PA.Framework.EgmClients.Avp.Rpc.MeterType,System.String)">
            <summary>
            Retreive a meter or set of meters based on type, and path.
            Note: if an incorrect type is given, this could potentially crash the EGM.
            </summary>
            <param name="type">Meter Type</param>
            <param name="path">Path to meter</param>
            <returns>Meter values, null on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetEventLogs(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.MenuLogTypes)">
            <summary>
            Retreive a event logs
            Note: if an incorrect type is given, this could potentially crash the EGM.
            </summary>
            <param name="type">Log Type</param>
            <param name="path">Path to Log</param>
            <returns>Event Log values, null on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetCurrentMenuContext">
            <summary>
            Gets The Current Context
            </summary>
            <returns>True</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.ClearPeriodMeters">
            <summary>
            Clears Period Meters
            </summary>
            <returns>True</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.ClearAllMeters">
            <summary>
            Clears All Meters
            </summary>
            <returns>True</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.ClearBillMeters">
            <summary>
            Clears Bill Meters
            </summary>
            <returns>True</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.GetMeters(IGT.PA.Framework.EgmClients.Avp.Rpc.MeterRequest[])">
            <summary>
            Wrapper to the RPC method that gets a multiple meter values in one call.
            Used primarily by the AvpMeter class.
            </summary>
            <param name="requests">Meter Requests</param>
            <returns>Meter Results</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.SwitchGame(System.Int32,System.Int32)">
            <summary>
            Switch to a specified game index.
            </summary>
            <param name="gameIndex">Specified game</param>
            <param name="denom">Denomination to select, 0 for default</param>
            <returns>True on success</returns>
            <remarks>
            Game must be enabled and playable. 
            Switching to the active game will attempt to change the denom.
            </remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.EnableGame(System.Int32,System.Boolean)">
            <summary>
            Enable a specific game (paytable).
            </summary>
            <param name="gameIndex">Game Index</param>
            <param name="enabled">True to enable, false to disable</param>
            <returns>True on success</returns>
            <remarks>
            Specific Denominations will need to be enabled as well.
            If no denominations are currently enabled, the first available denom will be enabled.
            </remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.SetGameDenoms(System.Int32,System.Int32[])">
            <summary>
            Set enabled denominations for a specified game (paytable)
            </summary>
            <param name="gameIndex">game index</param>
            <param name="denoms">enabled denominations</param>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.RaiseEvent(System.String,System.EventArgs)">
            <summary>
            Function used to dynamically raise an event inside this class, based on it's name.
            </summary>
            <param name="eventName">Name of event to raise</param>
            <param name="ea">Event args to use when invoking the event</param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.ConfigPath">
            <summary>
            Default Path to load configuration files from.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.XmlDefaultConfigPath">
            <summary>
            GetBank the path to the Xml file which contains info about dynamic config items.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.IsConnected">
            <summary>
            Test if we are connected to the EGM.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.ApiVersion">
            <summary>
            XML-RPC API Version
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.SystemAvpVersion">
            <summary>
            Avp Version
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.SystemConfigVersion">
            <summary>
            Config Version
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.SystemVersion">
            <summary>
            String describing the current system version
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.CurrentCountryCode">
            <summary>
            Current country code in use by the EGM
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.HasXDoor">
            <summary>
            Determine if the machine connected is monitoring the X Door
            </summary>
            <remarks>Currently only used by SLVQ</remarks>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.Stream">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.CommunicationsObject">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.TypeofMachine">
            <summary>
            Typeofs the machine.
            </summary>
            <returns></returns>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.Disconnected">
            <summary>
            Called when a connection to the EGM is lost
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.Name">
            <summary>
            The name of the object that uniquely identifies the object
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.Code">
            <summary>
            A short name used to identify the object
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.Id">
            <summary>
            The numeric identifier for an object that uniquely identifies it
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.IsActive">
            <summary>
            Determines whether the object is an active record, when true; or inactive, when false
            </summary>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.NameChanged">
            <summary>
            This event fires when the <see cref="P:IGT.PA.Framework.EgmClients.Interfaces.IBaseDataObject.Name"/> is changed
            </summary>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.CodeChanged">
            <summary>
            This event fires when the <see cref="P:IGT.PA.Framework.EgmClients.Interfaces.IBaseDataObject.Code"/> is changed
            </summary>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpEgmApi.IdChanged">
            <summary>
            This event fires when the <see cref="P:IGT.PA.Framework.EgmClients.Interfaces.IBaseDataObject.Id"/> is changed
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu">
            <summary>
            PadConnectionPassThu Allows passthrough for applications to use Pad interface
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu.PingInterval">
            <summary>
            An event has been received from the EGM.
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu.RecievedMessages">
            <summary>
            The Recieved Messages from the Server public to share
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu.OpenPadPassThruConnectionOverride(System.String,System.Int32)">
            <summary>
            Connects to a valid EGM using a hostname or IP address.
            Manual Connect without RPC, not threaded
            </summary> 
            <param name="Hostname">IP Address or hostname</param>
            <param name="Port">internally set</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu.ClosePadConnection">
            <summary>
            Close the existing Manual Override telnet session.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu.SocketThreadEntry">
            <summary>
            Thread for Processing new data event
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu.ParseMessage(System.String)">
            <summary>
            Parses the message from the Server
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu.RemoveItemFromMessages(System.Int32)">
            <summary>
            Removes the item from messages.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu.RemoveStringFromMessages(System.String)">
            <summary>
            Removes the string from messages.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu.ConnectWithTimeout(System.String,System.Int32,System.Int32)">
            <summary>
            Connects with timeout.
            </summary>
            <param name="address">The address.</param>
            <param name="port">The port.</param>
            <param name="msTimeout">The ms timeout.</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu.WriteLine(System.String)">
            <summary>
            Accepts a string argument (PAD command) and appends a newline to the return value from the Write method.
            This is the method to call when you commit the command to the EGM.
            </summary>
            <param name="cmd">PAD Command</param>
            <returns>True if the command was successfully sent to the EGM.</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu.Write(System.String)">
            <summary>
            Accepts a string argument (PAD command) to be passed to the EGM.
            Write does not contain a newline char, so it is useful when appending to an existing string
            to be sent to the EGM
            </summary>
            <param name="cmd">PAD string</param>
            <returns>True if the command was successfully sent to the EGM.</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu.Read">
            <summary>
            Query the EGM for the results of the last WriteLine command sent.
            </summary>
            <returns>The results of the last WriteLine command sent.</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu.ParseTelnet(System.Text.StringBuilder)">
            <summary>
            Parses messages from the telnet connection
            </summary>
            <param name="sb">The sb.</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu.SetIpAddress(System.String)">
            <summary>
            Set the IP Address or hostname property
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu.GetIpAddress">
            <summary>
            Gets the IP Address or hostname value
            </summary>
            <returns>IP address or hostname</returns>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu.Connected">
            <summary>
            A connection has been established.
            </summary>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu.Disconnected">
            <summary>
            A connection has been dropped or disconnected by user.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.PadConnectionPassThu.IsConnected">
            <summary>
            Check to verify that a valid EGM connection exists
            </summary>
            <returns>True if there is a valid connection.</returns>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Enumerations.AvpTouchAction">
            <summary>
            Touch screen action types
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Serialization.AISpecificMeter">
            <summary>
            AI Specific Meter Information
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Serialization.AISpecificMeter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Serialization.AISpecificMeter.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="systemVersion">System Version to filter on.</param>
            <param name="path">SafeStorage path to meter</param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Serialization.AISpecificMeter.SystemVersion">
            <summary>
            System Version that this object applies to.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Serialization.AISpecificMeter.Path">
            <summary>
            EGM Meter Path in Safe Storage.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Serialization.AISpecificMeter.Expression">
            <summary>
            Expression to evaluate for this meter instead of reading value directly from EGM.
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.AvpDoor">
            <summary>
            Implementation of <see cref="T:IGT.PA.Framework.EgmClients.Interfaces.IDoor"/> for AVP
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpDoor.AvpApi_DoorEvent(System.Object,IGT.PA.Framework.EgmClients.Interfaces.DoorEventArgs)">
            <summary>
            Event handle for door open and close.
            </summary>
            <param name="sender">AvpEgmApi</param>
            <param name="e">door event information</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpDoor.Open">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpDoor.Close">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpDoor.VerifyDoorState(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.DoorState)">
            <summary>
            Verify the particular action has occurred.
            </summary>
            <param name="state">Requested Door State</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpDoor.UpdateState">
            <summary>
            Update the internal state of the door.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpDoor.IsOpen">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpDoor.DoorType">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpDoor.WaitForStateChange">
            <summary>
            Set the behavior of Open() and Close() to wait for the door event to occur.
            This will ensure the door actually opens, or closes.
            </summary>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpDoor.DoorOpen">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpDoor.DoorClose">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpDoor.Name">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpDoor.Code">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpDoor.Id">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpDoor.IsActive">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpDoor.NameChanged">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpDoor.CodeChanged">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpDoor.IdChanged">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.SessionId">
            <summary>
            History Session ID
            </summary>
            <remarks>Not valid on some newer AIs</remarks>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.StageIndex">
            <summary>
            Associated AVP Stage index
            </summary>
            <remarks>Not valid on some newer AIs</remarks>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.ActIndex">
            <summary>
            Associated AVP Act index
            </summary>
            <remarks>Not valid on some newer AIs</remarks>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.GameIdentifier">
            <summary>
            AVP Game identifier of game this entry was played on.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.PaytableSection">
            <summary>
            Paytable section applicable to this History Entry
            </summary>
            <remarks>Not valid on some newer AIs</remarks>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.PlaySteps">
            <summary>
            Number of Play Steps the AI has recorded.
            </summary>
            <remarks>Only valid on newer AIs</remarks>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.ReelStops">
            <inheritdoc/>
            <remarks>Not currently implemented</remarks>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.LinesPlayed">
            <inheritdoc/>
            <remarks>Not currently implemented</remarks>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.CreditMultiplierPlayed">
            <inheritdoc/>
            <remarks>Not currently implemented</remarks>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.BonusCreditsPlayed">
            <inheritdoc/>
            <remarks>Not currently implemented</remarks>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.Time">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.TotalBet">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.Denomination">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.InitalCredits">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.FinalCredits">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.TotalWin">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.PaidMeter">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.MoneyIn">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.MoneyOut">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.IsBonusEligible">
            <inheritdoc/>
            <remarks>Not currently implemented</remarks>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.FeatureHistory">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.Events">
            <inheritdoc/>
            <remarks>Not currently implemented</remarks>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.WinLines">
            <inheritdoc/>
            <remarks>Not currently implemented</remarks>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.GameVariation">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.Name">
            <summary>
            The name of the object that uniquely identifies the object
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.Code">
            <summary>
            A short name used to identify the object
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.Id">
            <summary>
            The numeric identifier for an object that uniquely identifies it
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.IsActive">
            <summary>
            Determines whether the object is an active record, when true; or inactive, when false
            </summary>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.NameChanged">
            <summary>
            This event fires when the <see cref="P:IGT.PA.Framework.EgmClients.Interfaces.IBaseDataObject.Name"/> is changed
            </summary>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.CodeChanged">
            <summary>
            This event fires when the <see cref="P:IGT.PA.Framework.EgmClients.Interfaces.IBaseDataObject.Code"/> is changed
            </summary>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpSpinHistory.IdChanged">
            <summary>
            This event fires when the <see cref="P:IGT.PA.Framework.EgmClients.Interfaces.IBaseDataObject.Id"/> is changed
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.AvpEgm">
            <summary>
            Implementation of <see cref="T:IGT.PA.Framework.EgmClients.Interfaces.IEgm"/> for AVP
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.AvpEgm.meterRegex">
            <summary>
            Used for variable replacement in meter xml file.
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.AvpEgm.egmAddress">
            <summary>
            Address of EGM to connect to.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.#ctor">
            <summary>
            Default constructor for AVP EGM.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.#ctor(System.String)">
            <summary>
            AvpEgm Address constructor.
            </summary>
            <param name="address">Address of EGM</param>
            <remarks>Does not connect to the Egm, Connect() must still be called.</remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.Connect(System.String)">
            <summary>
            Connect to an egm at the specified address.
            </summary>
            <param name="address">Address of EGM</param>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.ClearCachedData">
            <summary>
            Clear any specific cached data about the EGM.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.AvpApiDisconnected(System.Object,System.EventArgs)">
            <summary>
            AvpEgmApi event handler for a disconnect.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.DetectPresentationPlatform">
            <summary>
            Detect the EGM platform 
            (Currently based on the monitors connected)
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.BuildDoors">
            <summary>
            Build up a list of AvpDoor objects for use with the Doors property
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.BuildButtons">
            <summary>
            Build up a list of buttons for use with the Buttons property
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.BuildSwitches">
            <summary>
            Build up a list of switches for use with the Switches property
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.GetMaxCashInAmount">
            <summary>
            Determine the maximum amount of money that can be added to the EGM.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.GetWinAmount">
            <summary>
            Gets the win amount.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.DisableEventServer(System.Boolean)">
            <summary>
            Disables the event server check when connecting to machine without Event Server
            </summary>
            <param name="setDisabled">if set to <c>true</c> [set disabled].</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.DisablePadServer(System.Boolean)">
            <summary>
            Disables the event server check when connecting to machine without Event Server
            </summary>
            <param name="setDisabled">if set to <c>true</c> [set disabled].</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.RemoveItemFromPadMessages(System.Int32)">
            <summary>
            Removes the item from pad messages.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.RemoveStringFromPadMessages(System.String)">
            <summary>
            Removes the string from pad messages.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.PadPassThruSendCommand(System.String)">
            <summary>
            Allows Pad Connection to be made
            </summary>
            <param name="padCommand">The pad command.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.PadPassThruRecieveCommand">
            <summary>
            Returns any bytes sent from the Connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.OpenPadPassThruConnectionOverride(System.String)">
            <summary>
            Opens the pad pass thru connection override.
            </summary>
            <param name="IpAddress">The ip address.</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.PadGetMessages">
            <summary>
            Get Messages from PAD
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.isPadConnectionActive">
            <summary>
            Determines whether [is pad connection active].
            </summary>
            <returns>
              <c>true</c> if [is pad connection active]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.ClosePadConnectionOverride">
            <summary>
            Closes the pad connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.Connect">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.IsProtocolInstalled(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.InstalledProtocols)">
            <summary>
            Determines whether [is protocol installed] [the specified proto].
            </summary>
            <param name="proto">The proto.</param>
            <returns>
              <c>true</c> if [is protocol installed] [the specified proto]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.Disconnect">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.GetMetersByPattern(System.String)">
            <summary>
            Get all meters matching the specified Glob pattern.
            </summary>
            <param name="wildcard">Glob pattern to match meters</param>
            <returns>list of matching meters</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.GetMeterByName(System.String)">
            <summary>
            Returns the first meter with the specified name.
            </summary>
            <param name="name">Meter Name</param>
            <returns>IMeter</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.PlayMaxMultiplier(System.Int32)">
            <inheritdoc/> 
            <remarks>Not currently implemented</remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.PlayMaxLines(System.Int32)">
            <inheritdoc/> 
            <remarks>Not currently implemented</remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.CalcSpinResults(System.Collections.Generic.List{System.Int32},IGT.PA.Framework.EgmClients.Interfaces.IGameVariation)">
            <inheritdoc/> 
            <remarks>Not currently implemented</remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.SetSymbolGrid(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{IGT.PA.Framework.EgmClients.Interfaces.IReelStrip})">
            <inheritdoc/> 
            <remarks>Not currently implemented</remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.CheckCredits(System.Int64)">
            <inheritdoc/> 
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.AddCredits(System.Int64)">
            <inheritdoc/> 
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.ClearSafeStorage">
            <summary>
            Clears the safe storage.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.ShutdownEgm">
            <summary>
            Reboots this instance.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.AddMoney(System.Int64)">
            <inheritdoc/> 
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.GetCurrentMenuContext">
            <summary>
            Gets the current menu context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.GetEventLogs(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.MenuLogTypes)">
            <summary>
            Gets the event logs.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.ToggleRng">
            <summary>
            Toggles the RNG.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.GetScreenShotInfo">
            <summary>
            Screen information associated with taking a screenshot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.IsTestRng">
            <summary>
            Determines whether [is test RNG].
            </summary>
            <returns>
              <c>true</c> if [is test RNG]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.IsRealRng">
            <summary>
            Determines whether [is real RNG].
            </summary>
            <returns>
              <c>true</c> if [is real RNG]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.RngAddSet(System.Int32[])">
            <summary>
            Adds RNG values
            </summary>
            <param name="rngVals">The RNG vals.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.ClearPeriodMeters">
            <summary>
            Clears the period meters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.NotifyConnected">
            <summary>
            Notifies the connected.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpEgm.NotifyDisconnected">
            <summary>
            Notifies the disconnected.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.ConfigPath">
            <summary>
            Configuration path to load AVP configuration xml files.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.Configure">
            <summary>
            The instance of configuration class.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.Meters">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.Doors">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.Buttons">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.KeySwitches">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.CurrentTilts">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.PresentationPlatform">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.GamePlatform">
            <summary>
            The type of operating system the game uses
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.IsCardEntered">
            <summary>
            The state of whether a player card is entered into the EGM
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.Themes">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.ActiveGame">
            <summary>
            The currently active game.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.ActiveTheme">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.DisplayGrid">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.SpinHistory">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.Egm">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.Api">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.Sas">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.G2s">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.FastConnectNoConfig">
            <summary>
            Gets or sets a value indicating whether [fast connect no config].
            </summary>
            <value>
            	<c>true</c> if [fast connect no config]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.MenuMeters">
            <summary>
            Gets all menu meters.
            </summary>
            <returns></returns>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpEgm.Connected">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpEgm.Disconnected">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpEgm.SymbolGridRefreshed">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpEgm.CalcSpinComplete">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.ManufacturerSerialNumber">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.AssetTag">
            <inheritdoc/> 
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.PowerSwitch">
            <inheritdoc/> 
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.Name">
            <inheritdoc/> 
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.Code">
            <inheritdoc/> 
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.Id">
            <inheritdoc/> 
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpEgm.IsActive">
            <inheritdoc/> 
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpEgm.NameChanged">
            <inheritdoc/> 
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpEgm.CodeChanged">
            <inheritdoc/> 
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpEgm.IdChanged">
            <inheritdoc/>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Rpc.AvpXmlRpc">
            <summary>
            Factory for creating IEgmProxy
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.AvpXmlRpc.GetProxyReference(System.String)">
            <summary>
            Creates an IEgmProxy to the EGM at the specified address
            </summary>
            <param name="egmAddress">Egm Address</param>
            <returns>XML RPC Proxy</returns>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Events.XmlEvent">
            <summary>
            Xml Event class used for serialization of the events received from the EGM.
            Generated with xsd.exe
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Events.XmlEvent.data">
            <remarks/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Events.XmlEvent.name">
            <remarks/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Events.XmlEvent.timestamp">
            <remarks/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Events.XmlEvent.sequence">
            <remarks/>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Events.eventData">
            <remarks/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Events.eventData.name">
            <remarks/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Events.eventData.Value">
            <remarks/>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Events.EventMapData">
            <summary>
            Class used to hold data to dynamically handle events from EGM.
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.Events.EventMapData.matchData">
            <summary>
            Regexes for key and value to be used to determine if this is a match for the received event.
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.Events.EventMapData.createEventArgs">
            <summary>
            Function used to generate specific EventArgs for this event, if it is a match.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.EventMapData.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Func{IGT.PA.Framework.EgmClients.Avp.Events.AvpEvent,IGT.PA.Framework.EgmClients.Interfaces.EgmEventArgs})">
            <summary>
            Constructor
            </summary>
            <param name="remoteEventName">Name of the EGM event to trigger from</param>
            <param name="localEventName">Name of the event to fire if this is a match</param>
            <param name="argMatchData">Key, value regexes used to determine if this is a match</param>
            <param name="createEventArgs">Function to call to create EventArgs if this is a match</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.EventMapData.IsMatch(IGT.PA.Framework.EgmClients.Avp.Events.AvpEvent)">
            <summary>
            Determines if the EGM event is a match for this particular mapping
            </summary>
            <param name="avpEvent">AvpEvent</param>
            <returns>true if match</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.EventMapData.GetEventArgs(IGT.PA.Framework.EgmClients.Avp.Events.AvpEvent)">
            <summary>
            If this is a match, build custom event args basserted on the data received.
            </summary>
            <param name="data">AvpEvent</param>
            <returns>Specific event args for this event</returns>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Events.EventMapData.RemoteEventName">
            <summary>
            Name of the event from the Egm to match
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Events.EventMapData.LocalEventName">
            <summary>
            Name of event in IEgmApi to fire
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventArgs">
            <summary>
            Event Args for a generic egm event.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventArgs.#ctor(IGT.PA.Framework.EgmClients.Avp.Events.AvpEvent)">
            <summary>
            Default constructor
            </summary>
            <param name="ev">Event information</param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Events.AvpEventArgs.Event">
            <summary>
            Information about an event that occured on the EGM
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.MainMenu">
            <summary>
            Class for configuring main menu settings
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MainMenu.MainMenuStyle">
            <summary>
            Gets or sets the main menu style.
            </summary>
            <value>
            The main menu style.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MainMenu.DigitalGlassGraphic">
            <summary>
            Gets or sets the digital glass graphic.
            </summary>
            <value>
            The digital glass graphic.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MainMenu.ThemesDisplayedPerPage">
            <summary>
            Gets or sets the themes displayed per page.
            </summary>
            <value>
            The themes displayed per page.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MainMenu.GameTab1">
            <summary>
            Gets or sets the game tab1.
            </summary>
            <value>
            The game tab1.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MainMenu.GameTab2">
            <summary>
            Gets or sets the game tab2.
            </summary>
            <value>
            The game tab2.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MainMenu.GameTab3">
            <summary>
            Gets or sets the game tab3.
            </summary>
            <value>
            The game tab3.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.MainMenu.ProgressiveAdvertisementText">
            <summary>
            Gets or sets the progressive advertisement text.
            </summary>
            <value>
            The progressive advertisement text.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Rpc.Door">
            <summary>
            Door Indexes used in Door functions of <seealso cref="T:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy"/>
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Rpc.Switches">
            <summary>
            Switch indexes
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Rpc.MeterType">
            <summary>
            AVP Meter Types
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Rpc.AvpHopperStatus">
            <summary>
            AVP Hopper status that can be reported.
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Rpc.AvpHopperError">
            <summary>
            AVP Hopper errors that can be reported.
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Rpc.AvpBillValidatorError">
            <summary>
            AVP Bill Validator errors that can be reported.
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Rpc.AvpPrinterError">
            <summary>
            AVP Printer errors that can be reported.
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Rpc.GameMemoryInfo">
            <summary>
            Game Memory Information.
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Rpc.HistoryEntry">
            <summary>
            Information tied to a particular history entry
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Rpc.PaytableInfo">
            <summary>
            Paytable information tied to a specific game id
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Rpc.MeterRequest">
            <summary>
            Used with GetMeters to request a set of meters
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Rpc.MeterResult">
            <summary>
            Results from GetMeters, multiple meter response
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Rpc.PackageMd5">
            <summary>
            Package path and Md5 string, result from GetPackageListMd5()
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Rpc.BiosCrc">
            <summary>
            Bios name and crc, result from GetBiosCrc()
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Rpc.ConfigurationItem">
            <summary>
            Information about a specific configuration Item
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Rpc.ScreenshotData">
            <summary>
            Screen information associated with taking a screenshot.
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy">
            <summary>
            XML RPC Proxy class, used to access the XML RPC interface of the EGM.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetLastError">
            <summary>
            Returns the last error message (API)
            </summary>
            <returns>error message</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.ApiVersion">
            <summary>
            Returns the API version
            String in the format of "X.X.X"
            </summary>
            <returns>API Version</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetPlatform">
            <summary>
            Returns the platform (currently returns "AVP")
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.Reboot">
            <summary>
            Reboot the EGM in a safe manner.
            This is not a fast/hard reboot. Do not use for transitition testing.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.ClearSafeStorage">
            <summary>
            Clear the EGM's SafeStorage and Reboot.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.OpenDoor(System.Int32)">
            <summary>
            Open a door with the specified index.
            </summary>
            <param name="door">Door Index</param>
            <returns>True if door was opened</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.CloseDoor(System.Int32)">
            <summary>
            Close a door with a specified index.
            </summary>
            <param name="door">Door Index</param>
            <returns>True if door was closed</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.IsDoorOpen(System.Int32)">
            <summary>
            Determine if a specific door is open.
            </summary>
            <param name="door">Door Index</param>
            <returns>True if door is open</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.IsAnyDoorOpen">
            <summary>
            Returns true if any door is open, false otherwise.
            </summary>
            <returns>True if any door is open.</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.CloseAllDoors">
            <summary>
            Closes all open doors.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.SetEventMode(System.Boolean)">
            <summary>
            Set the method for which button events are to be created.
            Default (false) is to use the senet buffer method. This can fail when a hopper is connected.
            Event (true) sends events directly, bypassing the buffer and "Switches" process.
                A side effect of the event method is that the "IsButtonDown" method will not be correct.
            </summary>
            <param name="enabled">Enable the event method for button presses.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.PressButton(System.Int32)">
            <summary>
            Press a button with a given index (1-16).
            </summary>
            <param name="idx">Button Index (1-16)</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.ReleaseButton(System.Int32)">
            <summary>
            Release a button with a given index (1-16).
            </summary>
            <param name="idx">Button Index (1-16)</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.IsButtonDown(System.Int32)">
            <summary>
            Release a button with a given index (1-16).
            </summary>
            <param name="idx">Button Index (1-16)</param>
            <returns>True if button is pressed (held down).</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.PressReleaseButton(System.Int32)">
            <summary>
            Press and Release a button with a given index (1-16).
            </summary>
            <param name="idx">Button Index (1-16)</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.TestSwitchPress">
            <summary>
            Press the Test Switch
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.TestSwitchRelease">
            <summary>
            Release the Test Switch
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.JackpotResetPress">
            <summary>
            Press the Jackpot Reset key
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.JackpotResetRelease">
            <summary>
            Release the Jackpot Reset key
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.W2GResetPress">
            <summary>
            Press the W2G Reset key.
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.W2GResetRelease">
            <summary>
            Release the W2G Reset key.
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.IsBvEnabled">
            <summary>
            Determine if the Bill Validator is enabled.
            </summary>
            <returns>True if enabled</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.IsSwitchDown(System.Int32)">
            <summary>
            Determine if a switch is active, or pressed.
            </summary>
            <param name="idx">switch index</param>
            <returns>true if active or in the pressed state</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.BillIn(System.Int64)">
            <summary>
            Insert a bill with a given value.
            </summary>
            <param name="billValue">Bill Value</param>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.BillInCountry(System.Int64,System.Int32)">
            <summary>
            Inserts a bill with the specified country code
            </summary>
            <param name="billValue">value of bill, in cents</param>
            <param name="country">country code (AVP specific)</param>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.CoinIn">
            <summary>
            Insert Coin
            </summary>
            <returns>True on success</returns>
            <remarks>Should probably be modified to take a number of coins.</remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.PostBvError(System.Boolean,System.Int32)">
            <summary>
            Cause or clear a Bill Validator error of the specific error code.
            </summary>
            <param name="setError">true sets the condition, false clears the condition</param>
            <param name="errorCode">error type</param>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.PostPrinterError(System.Boolean,System.Int32)">
            <summary>
            Cause or clear a printer error of the specific error code.
            </summary>
            <param name="setError">true sets the condition, false clears the condition</param>
            <param name="errorCode">error type</param>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.PostCoinAccError(System.Boolean,System.Int32)">
            <summary>
            Cause or clear a coin acceptor error of the specific error code.
            </summary>
            <param name="setError">true sets the condition, false clears the condition</param>
            <param name="errorCode">error type</param>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.PostHopperError(System.Boolean,System.Int32)">
            <summary>
            Cause or clear a hopper error of the specific error code.
            </summary>
            <param name="setError">true sets the condition, false clears the condition</param>
            <param name="errorCode">error type</param>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.PostHopperStatus(System.Int32)">
            <summary>
            Notify the system of a specific hopper status.
            </summary>
            <param name="statusCode">AvpHopperStatus enum value</param>
            <returns>true on success</returns>
            <remarks>API version 1.1.4</remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.Touch(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Send a Touch Screen event.
            </summary>
            <param name="screen">Screen id (0 = MAIN, 1 = TOP)</param>
            <param name="action">action type (1 = DOWN, 2 = DRAG, 3 = UP)</param>
            <param name="x">X Coord [-1, 1]</param>
            <param name="y">Y Coord [-1, 1]</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.SendMouseClick(System.Double,System.Double)">
            <summary>
            Sends the mouse click for bottom screen only
            </summary>
            <param name="x">The x coord.</param>
            <param name="y">The y coord.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.InsertPlayerCard(System.Int32,System.Byte[])">
            <summary>
            Insert a player card
            </summary>
            <param name="track">Track Number</param>
            <param name="data">Track Data</param>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.RemovePlayerCard">
            <summary>
            Remove player Card.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.SetHopperFull">
            <summary>
            Set hopper level to Full.
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.SetHopperNormal">
            <summary>
            Set hopper level to Normal.
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.ToggleRng">
            <summary>
            Toggle the RNG (test to real, or real to test)
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.IsRealRng">
            <summary>
            Determines if the real rng is enabled.
            </summary>
            <returns>true if real rng in use</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.IsTestRng">
            <summary>
            Determines if the test rng is enabled.
            </summary>
            <returns>true if test rng in use</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.SetRealRng">
            <summary>
            Enables the real rng
            </summary>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.SetTestRng">
            <summary>
            Enables the test rng
            </summary>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.SetRngFilter(System.Boolean)">
            <summary>
            Enable or Disable the RNG Filter feature.
            </summary>
            <param name="enableFilter">true to enable, false to disable</param>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.ClearFilters">
            <summary>
            Clear the list of Caller IDs that are filtered to the real RNG.
            This causes all callers to use the Test RNG if it is enabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.RngAddFilter(System.String)">
            <summary>
            Add a Caller ID to be filtered to the Real RNG.
            </summary>
            <param name="filter">Caller ID</param>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.RngRemoveFilter(System.String)">
            <summary>
            Remove an entry from the Real RNG filter.
            </summary>
            <param name="filter">Caller ID</param>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.RngGetFilters">
            <summary>
            GetBank a list of current Caller IDs that are being filtered to the Real RNG.
            </summary>
            <returns>List of RNG callers</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.ClearTestRng">
            <summary>
            Clear the Test RNG of all values.
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.ClearTestRngCaller(System.String)">
            <summary>
            Clear the TEST RNG values for a specified Caller ID.
            </summary>
            <param name="caller">Caller ID</param>
            <returns>True on Success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.RngAddSet(System.Int32[])">
            <summary>
            Add a set of RNG values to the Test RNG.
            </summary>
            <param name="rngVals">List of RNG values to add as a set</param>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.RngAddNamedSet(System.String,System.Int32[])">
            <summary>
            Add a named RNG set to the Test RNG.
            </summary>
            <param name="name">Caller ID (ex. "GAME")</param>
            <param name="rngVals">Set values to add</param>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.IsInBonus">
            <summary>
            Determine if the game is in a bonus.
            </summary>
            <returns>True if in bonus</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.IsHandpayPending">
            <summary>
            Determine if there is a handpay pending.
            </summary>
            <returns>True if handpay is pending</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.AreTiltsPending">
            <summary>
            Determine if there are any pending tilts.
            </summary>
            <returns>True if any tilts are pending</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetHandpayAmount">
            <summary>
            GetBank the current Handpay amount
            </summary>
            <returns>Handpay Value</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetCurrentCredits">
            <summary>
            GetBank the Current Credits
            </summary>
            <returns>Number of credits</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetWinMeterCredits">
            <summary>
            GetBank the current Win Meter Value (credits).
            </summary>
            <returns>Number of credits</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetTotalGameBetCredits">
            <summary>
            Returns the current game bet.
            </summary>
            <returns>Game Bet Value</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetConfig(System.String)">
            <summary>
            Returns the value of a specified Config Item.
            </summary>
            <param name="configName">config item name</param>
            <returns>value for config item</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.EnumerateConfig(System.String)">
            <summary>
            Enumerate all configuration values within the given uniqueId
            </summary>
            <param name="uniqueId">unique id</param>
            <returns>Array of configuration items</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.EnumerateConfig">
            <summary>
            Enumerate all configuration values on the EGM.
            </summary>
            <returns>Array of configuration items</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.SetConfig(System.String,System.String,System.String)">
            <summary>
            Set a config value (within the 'uniqueId' domain) to value
            Note: on AVP a config value exists within a given uniqueId (theme/game for example)
                System uses "" as it's unique id.
            </summary>
            <param name="configItem">config item name</param>
            <param name="uniqueId">unique id for config item</param>
            <param name="value">value to assign</param>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetConfig(System.String[])">
            <summary>
            Returns the value for specified Config Items.
            </summary>
            <param name="configName">config item names</param>
            <returns>value for config items</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetLoadTime">
            <summary>
            Returns the game's load time (ms)
            </summary>
            <returns>Load time (ms)</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetState">
            <summary>
            Returns the current state, as a string.
            </summary>
            <returns>state</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetAssetNumber">
            <summary>
            Returns the machine's Asset number.
            </summary>
            <returns>Asset number</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetMachineId">
            <summary>
            Returns the Machine Id
            </summary>
            <returns>Machine Id</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetCurrentGameIdentifier">
            <summary>
            Returns the current game's Game Identifier
            </summary>
            <returns>Game Identifier</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetCurrentThemeIdentifier">
            <summary>
            Returns the current game's Theme Identifier
            </summary>
            <returns>Theme Identifier</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetPlayerDenom">
            <summary>
            GetBank the currently selected player denom.
            </summary>
            <returns>Player Denom</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetAccountingDenom">
            <summary>
            GetBank the machine accounting denom.
            </summary>
            <returns>Accounting Denom</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetLicenseRequestCode">
            <summary>
            GetBank the License Request Code
            </summary>
            <returns>License Request Code</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.SetLicense(System.String)">
            <summary>
            Set the License
            </summary>
            <param name="license">license data</param>
            <returns>True if license data set.</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetPackageList">
            <summary>
            Returns a list of all the game packages on the EGM.
            </summary>
            <returns>List of game packages</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetPackageListMd5">
            <summary>
            Returns a list of all packages on the EGM, and MD5 values.
            </summary>
            <returns>List of packages and md5 values</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetBiosCrc">
            <summary>
            Returns a the bios name and calculated crc32 (needs to be cast to unsigned)
            </summary>
            <returns>bios name and crc</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetCurrentGameIndex">
            <summary>
            Returns the Game Index of the currently enabled game.
            </summary>
            <returns>Game Index of the currently enabled game</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetNumberOfGames">
            <summary>
            Returns the number of games.
            </summary>
            <returns>Number of games</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetPaytableId(System.Int32)">
            <summary>
            Returns the Paytable for a specified Game Index.
            </summary>
            <param name="gameId">Game Index</param>
            <returns>Paytable for given game index.</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetThemeName(System.Int32)">
            <summary>
            Returns the Theme name
            </summary>
            <param name="gameId">Game Index</param>
            <returns>Theme name for given game index.</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetGameMemoryInfo(System.Int32)">
            <summary>
            Gets information about the specified Game Index.
            </summary>
            <param name="gameIdx">Game index (between 0 and GetNumberOfGames())</param>
            <returns>Memory information for specified game</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetAllGameMemoryInfo">
            <summary>
            Gets memory information about all games installed.
            </summary>
            <returns>GameMemoryInfo for each gameId</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetAvailableRam">
            <summary>
            GetBank the available system RAM in bytes
            </summary>
            <returns>Available system RAM (bytes)</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetTotalRam">
            <summary>
            GetBank the total system RAM in bytes.
            </summary>
            <returns>System RAM (bytes)</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetTime">
            <summary>
            Gets the time on the egm (unix time)
            Needs to be cast to an unsigned int and evaluated.
            </summary>
            <returns>unix time</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.SetTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time on the egm (unix time)
            <param name="month">month</param>
            /// <param name="day">day</param>
            /// <param name="year">year</param>
            /// <param name="hours">hours</param>
            /// <param name="minutes">minutes</param>
            /// <param name="seconds">seconds</param>
            /// <param name="offseconds">offSeconds</param>
            </summary>
            <returns>bool if time was set</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetHistoryCount">
            <summary>
            Gets the number of history enteries on the egm.
            </summary>
            <returns>count of history entries</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetHistoryEntry(System.Int32)">
            <summary>
            Gets a history entry at a specified index.
            </summary>
            <param name="idx">index of history entry</param>
            <returns>History data</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetAllHistoryEntries">
            <summary>
            Gets all game history information from the EGM.
            </summary>
            <returns>History data</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetMeterBlock(System.Int32,System.String)">
            <summary>
            GetBank a meter or meter block by type and id
            </summary>
            <param name="type">Type of meter to read (see MeterType)</param>
            <param name="path">Path to meter in SafeStore</param>
            <returns>Returns meter values, empty array on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetEventLogs(System.Int32)">
            <summary>
            Gets Event logs with one calls
            </summary>
            <param name="requests">A list of Event logs</param>
            <returns>Successfully retrieved events</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.InsertEkey(System.Boolean)" -->
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetCurrentMenuContext">
            <summary>
            Gets CurrentContextOfGame
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.ClearBillMeters">
            <summary>
            Clears Bill Meters
            </summary>
            <returns>true</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.ClearAllMeters">
            <summary>
            Clears All Meters
            </summary>
            <returns>true</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.ClearPeriodMeters">
            <summary>
            Clears Period Meters
            </summary>
            <returns>true</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetIsGameAvailable">
            <summary>
            Checks if the game is playable
            </summary>
            <returns>true</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetMeters(IGT.PA.Framework.EgmClients.Avp.Rpc.MeterRequest[])">
            <summary>
            GetBank a large set of meters with one call.
            </summary>
            <param name="requests">A list of meter requests</param>
            <returns>Successfully retreived meters</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.SwitchGame(System.Int32,System.Int32)">
            <summary>
            Switch to a specific game
            </summary>
            <param name="gameIdx">index of game</param>
            <param name="denom">denomination</param>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.EnableGame(System.Int32,System.Boolean)">
            <summary>
            Enable or Disable a specific game
            </summary>
            <param name="gameIdx">index of game</param>
            <param name="enabled">true to enable, false to disable</param>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetGameDenoms">
            <summary>
            GetBank a list of denominations enabled on the EGM
            </summary>
            <returns>denomination list</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetEnabledGameDenoms">
            <summary>
            GetBank Enabled denominations for current game
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.SetEnabledGameDenoms(System.Int32,System.Int32[])">
            <summary>
            Set the enabled denominations for a specific game
            </summary>
            <param name="gameId">game id</param>
            <param name="denoms">denoms</param>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetPaytableInfo(System.Int32)">
            <summary>
            Gets information on the paytable of a specified game index.
            </summary>
            <param name="gameIdx">game index to query</param>
            <returns>Paytable Information</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetAllPaytableInfo">
            <summary>
            Gets paytable information on all games installed on EGM.
            </summary>
            <returns>Paytable Information</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetFileContents(System.String)">
            <summary>
            Retreives the contents of a specified file, if it is small enough.
            </summary>
            <param name="path">Path of file to retreive</param>
            <returns>contents of file</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.SetFileContents(System.String,System.String)">
            <summary>
            Writes a file to specified path of access permitted and authenticaiton passes
            </summary>
            <param name="path">Path of file to retreive</param>
            <returns>contents of file</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.GetDirectoryContents(System.String)">
            <summary>
            Gets a list of the contents of a specified directory.
            </summary>
            <param name="directory">Path to query</param>
            <returns>Conents of specified directory</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.EnableEvents(System.Boolean)">
            <summary>
            Enable or Disable the event server.
            </summary>
            <param name="enable">True to enable</param>
            <returns>True if enabled, False if disabled</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.IsEventServerEnabled">
            <summary>
            Determine if the Event Server is enabled.
            </summary>
            <returns>True if enabled, False if disabled</returns>
            <remarks>Requires API 1.1.3+</remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.ScreenshotInit">
            <summary>
            Initialize and load the Screenshot plugin
            </summary>
            <returns>True if initialized</returns>
            <remarks>Requires API 1.1.3+</remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.ScreenshotCapture(System.Int32)">
            <summary>
            Capture a screenshot.
            </summary>
            <param name="type">See ImageType enum, or use 1 = PNG, 2 = JPEG</param>
            <returns>image data</returns>
            <remarks>Requires API 1.1.3+</remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.ScreenshotInfo">
            <summary>
            GetBank information associated with the last screenshot.
            </summary>
            <returns></returns>
            <remarks>Requires API 1.1.3+</remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Rpc.IEgmProxy.ScreenshotCleanup">
            <summary>
            Unload the screenshot plugin.
            </summary>
            <remarks>Requires API 1.1.3+</remarks>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Network">
            <summary>
            Class for Configuring Network Settings
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Network.#ctor(IGT.PA.Framework.EgmClients.Avp.AvpEgmApi)">
            <summary>
            Initializes a new instance of the <see cref="T:IGT.PA.Framework.EgmClients.Avp.Network"/> class.
            </summary>
            <param name="egmApi">The egm API.</param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Network.AutoDetectNetworkSettings">
            <summary>
            Gets or sets a value indicating whether [auto detect network settings].
            </summary>
            <value>
            	<c>true</c> if [auto detect network settings]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Network.MachineIPAddress">
            <summary>
            Gets or sets the machine IP address.
            </summary>
            <value>
            The machine IP address.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Network.DefaultGateway">
            <summary>
            Gets or sets the default gateway.
            </summary>
            <value>
            The default gateway.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Network.Netmask">
            <summary>
            Gets or sets the netmask.
            </summary>
            <value>
            The netmask.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Network.BroadcastAddress">
            <summary>
            Gets or sets the broadcast address.
            </summary>
            <value>
            The broadcast address.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Network.DNS1">
            <summary>
            Gets or sets the DN s1.
            </summary>
            <value>
            The DN s1.
            </value>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Network.DNS2">
            <summary>
            Gets or sets the DN s2.
            </summary>
            <value>
            The DN s2.
            </value>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi">
            <summary>
            Implementation of <see cref="T:IGT.PA.Framework.EgmClients.Interfaces.IEgmApi"/> for AVP
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.Listener_Connected(System.Object,System.EventArgs)">
            <summary>
            Event fired when the AvpEventListener connects.
            </summary>
            <param name="sender">AvpEventListener</param>
            <param name="e">empty</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.Listener_Disconnected(System.Object,System.EventArgs)">
            <summary>
            Event fired when the AvpEventListener disconnects.
            </summary>
            <param name="sender">AvpEventListener</param>
            <param name="e">empty</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.Listener_EventReceived(System.Object,IGT.PA.Framework.EgmClients.Avp.Events.AvpEventArgs)">
            <summary>
            Event fired when an event is received
            </summary>
            <param name="sender">AvpEventListener</param>
            <param name="e">EventArgs containing event data from EGM</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.AddEventMapping(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Func{IGT.PA.Framework.EgmClients.Avp.Events.AvpEvent,IGT.PA.Framework.EgmClients.Interfaces.EgmEventArgs})">
            <summary>
            Adds an event mapping for a remote (EGM event) to trigger a local event (EventHandler)
            Given that it matches all conditions (additional data)
            Then uses a function to create the EventArgs to trigger the given event.
            </summary>
            <param name="remoteEventName">Event name from the EGM</param>
            <param name="localEventName">Local event name</param>
            <param name="matchConditions">Dictionary of regexs to match against key/value pairs of incomming event</param>
            <param name="createArgs">If match conditions are met, call this function to generate EventArgs</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.RpcCheckError(System.Action)">
            <summary>
            Used to handle error conditions that can be thrown during RPC calls. 
            This keeps us from duplicating the same error handling code, and 
            allows for changes to be easily made in the way errors are handled.
            </summary>
            <param name="rpcCall">Action containing RPC calls</param>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.RpcCheckError``1(System.Func{``0},``0)">
            <summary>
            Used to handle error conditions that can be thrown during RPC calls. 
            This keeps us from duplicating the same error handling code, and 
            allows for changes to be easily made in the way errors are handled.
            </summary>
            <typeparam name="T">Type expected as return</typeparam>
            <param name="rpcCall">Func which makes RPC calls</param>
            <param name="defaultValue">Default value to return if an error occurs</param>
            <returns>either returns the rpcCall return value, or defaultValue on failure.</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.SendMouseClick(System.Double,System.Double)">
            <summary>
            Sends  mouse click
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetDynamicConfigData">
            <summary>
            Loads all config items from the config xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.Connect(System.String)">
            <summary>
            Connect to an EGM at a specific address.
            </summary>
            <param name="address">IP address of EGM</param>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.DisableEventServer(System.Boolean)">
            <summary>
            Disables the event server.
            </summary>
            <param name="setDisabled">if set to <c>true</c> [set disabled].</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.Disconnect">
            <summary>
            Disconnect from EGM
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.DisconnectPad">
            <summary>
            Disconnects pad.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.ClearCachedData">
            <summary>
            Clear any specific cached data about the EGM.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.SendCommand(System.String,System.Object[])">
            <summary>
            Not currently implemented.
            </summary>
            <param name="command"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.InsertBill(System.Int32,System.Int32,IGT.PA.Framework.EgmClients.Interfaces.Enumerations.CountryCode)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.InsertCoin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.InsertVoucher(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.InsertPlayerCard(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.RemovePlayerCard">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.AvpTouch(System.Int32,IGT.PA.Framework.EgmClients.Avp.Enumerations.AvpTouchAction,System.Double,System.Double)">
            <summary>
            Wraps the egm proxy touch function
            </summary>
            <param name="screen">screen index (0 = default)</param>
            <param name="action">Action to perform</param>
            <param name="x">x coordinate [-1, 1]</param>
            <param name="y">y coordinate [-1, 1]</param>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.TouchScreen(System.Double,System.Double,System.Boolean,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.ReleaseTouchScreen">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetDoorId(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.DoorType)">
            <summary>
            Used to translate IEgmApi Door codes to specific AVP door codes.
            For use with various proxy functions taking a door index.
            </summary>
            <param name="door">DoorType</param>
            <returns>AVP Door Index</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetDoorType(IGT.PA.Framework.EgmClients.Avp.Rpc.Door)">
            <summary>
            Translates an Rpc Door type to an interface DoorType
            </summary>
            <param name="door">Rpc Door</param>
            <returns>DoorType</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetDoorType(System.String)">
            <summary>
            Translates a string name (in an event) to the proper door type.
            </summary>
            <param name="name">string door description</param>
            <returns>DoorType</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.OpenDoor(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.DoorType)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.CloseDoor(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.DoorType)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetDoorState(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.DoorType)">
            <summary>
            Determine the current state of the specified door.
            </summary>
            <param name="door">Door to check</param>
            <returns>Door State</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.IsSwitchActive(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.SwitchType)">
            <summary>
            Determine the current state of the specified switch
            </summary>
            <param name="switchType">Switch to check</param>
            <returns>true if switch is active or depressed</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.DeactivateSwitch(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.SwitchType)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.ActivateSwitch(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.SwitchType)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.ToggleSwitch(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.SwitchType)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.CycleSwitch(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.SwitchType)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.DetectHopperFix">
            <summary>
            Determines if a hopper is enabled, if so assume we need to use the event method for
            sending button events, and adjust appropriatly.
            
            Note: this has an affect on the ability to determine if a button is currently pressed.
            Since we bypass the senet buffer, we will not be able to determine if button is down.
            Only physical button down will cause the bit to be set, and thus cause IsButtonDown to return true.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.PressButton(System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.ReleaseButton(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.CallforService">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.CashOut">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.Spin">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.PlayMaxBet">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.SetReelStops(System.Collections.Generic.List{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.SetRandomNumbers(System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}})">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.ResetRng">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.SetConfigurationInfo(System.Xml.Linq.XDocument)">
            <summary>
            Not currently implemented.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.SetTilt(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.TiltType)">
            <summary>
            Not currently implemented.
            </summary>
            <param name="tiltType"></param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetConfigurationInfo">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetMemoryInfo">
            <summary>
            Gets the memory info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetGameInfo">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetSystemInfo">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetScreenImage">
            <summary>
            Not currently implemented.
            </summary>
            <returns>a screenshot</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.ToggleRng">
            <summary>
            Toggles the RNG.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.IsTestRng">
            <summary>
            Determines whether [is test RNG].
            </summary>
            <returns>
              <c>true</c> if [is test RNG]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.IsRealRng">
            <summary>
            Determines whether [is real RNG].
            </summary>
            <returns>
              <c>true</c> if [is real RNG]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.RngAddSet(System.Int32[])">
            <summary>
            Adds RNG values
            </summary>
            <param name="rngVals">The RNG vals.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetState">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetFileContents(System.String)">
            <summary>
            Gets the file contents.
            </summary>
            <param name="filePath">The file path.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.CopyEgmRegistryFile">
            <summary>
            Copies the egm registry file to the local machine c:\registry.xml
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.ProtocolsInstalled">
            <summary>
            List to Installed Protocols
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetProtocolsInstalled">
            <summary>
            Gets the protocols installed.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.SetFileContents(System.String,System.String)">
            <summary>
            Writes the file contents to AVP - no access - do not use
            </summary>
            <param name="pathOfLocalFile">The path of local file.</param>
            <param name="pathToNewAvpFile">The path to new avp file.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetTilts">
            <summary>
            Returns a list of tilts.
            AVP NOTE: The only tilts we can specifically query for are door open and handpay.
            If a tilt is pending this will add Unknown, as well as either DoorOpen, Handpay or both to the list.
            Unknown could exist because of the Door or Handpay condition, or it could signify other tilts.
            </summary>
            <returns>List of Tilts currently pending</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.SystemSafeStorageClear">
            <summary>
            Clears EGM SafeStorage and Reboots EGM.
            Be careful when calling this function as it wipes EGM data.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.Reboot">
            <summary>
            Reboots EGM.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetConfig(System.String)">
            <summary>
            GetBank the data associated with a configuration item
            </summary>
            <param name="configName">config name to load</param>
            <returns>value of config item, null on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetConfig(System.String[])">
            <summary>
            GetBank the data associated with configuration items
            </summary>
            <param name="configNames">config names to load</param>
            <returns>value of config items, null on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.UpdateConfigCache">
            <summary>
            Update the local cache of all configuration items from the EGM.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetConfigUniqueIds">
            <summary>
            Returns a list of all UniqueIds from the configuration cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetConfigItems(System.String)">
            <summary>
            Return all configuration items with the specified UniqueID
            </summary>
            <param name="uniqueId">Configuration UniqueId</param>
            <returns>List of configIds</returns>
            <remarks>
            On AVP, think of the UniqueID as a category. 
            The system uses an empty string for global configuration.
            GameIdentifiers and ThemeIdentifiers are also used for game/theme specific configuration.
            </remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.LookupConfig(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="configId">Configuration ID</param>
            <param name="uniqueId">Configuration UniqueId</param>
            <returns>String value representation of the config value, null if not found</returns>
            <remarks>
            On AVP, think of the UniqueID as a category. 
            The system uses an empty string for global configuration.
            GameIdentifiers and ThemeIdentifiers are also used for game/theme specific configuration.
            </remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.SetConfig(System.String,System.String,System.String)">
            <summary>
            Set the value of a configuration item.
            </summary>
            <param name="configId">Configuration Item Name</param>
            <param name="uniqueId">Unique ID for the given Configuration Item</param>
            <param name="value">Value to set the configuration item to</param>
            <returns>True if successful</returns>
            <remarks>
            Note that all configuration types may not be supported.
            Some configuration items may also be marked as non-modifiable, and therefore cannot be set.
            </remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetEgmId">
            <summary>
            GetBank the EGM id. (eg. "IGT_00012921BE9E")
            </summary>
            <returns>Egm Id</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetAssetNumber">
            <summary>
            Returns the EGM's Asset number.
            </summary>
            <returns>Asset number</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetCurrentGameIndex">
            <summary>
            GetBank the current Game Index
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetCurrentThemeName">
            <summary>
            Returns the name of the current theme.
            </summary>
            <returns>Theme name</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetAvpState">
            <summary>
            Gets the string description of the current game state.
            </summary>
            <returns>string description of state</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.getDirectories(System.String)">
            <summary>
            Gets the directories.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetAvpPackageName">
            <summary>
            Returns the AVP package name
            </summary>
            <returns>package name, null on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetConfigPackageName">
            <summary>
            Returns the name of the config package.
            </summary>
            <returns>config package name, null on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetAccountingDenom">
            <summary>
            GetBank the accounting denom for the Egm
            </summary>
            <returns>accounting denom, 0 on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetPlayerDenom">
            <summary>
            Gets the currently selected player denom from the Egm.
            </summary>
            <returns>Player denom, 0 on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetWinAmount">
            <summary>
            Returns the win amount of the last game.
            </summary>
            <returns>win amount, -1 on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetPaidMeter">
            <summary>
            Gets the Paid meter.
            </summary>
            <returns>meter value, -1 on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetCurrentCredits">
            <summary>
            Returns the current credits.
            </summary>
            <returns>current credits, -1 on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetGameLoadTime">
            <summary>
            Returns the load time of the current game
            </summary>
            <returns>Load time (ms), 0 on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetTime">
            <summary>
            Returns the current time on the EGM
            </summary>
            <returns>Current time</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.SetTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time.
            </summary>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <param name="offSeconds">The off seconds.</param>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetHistory">
            <summary>
            GetBank the game history
            Do not call while game is being played.
            </summary>
            <returns>List of history entries, null on error</returns>
            <remarks>Temporary until IEgm History interface is complete</remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetCurrentHistorySessionId">
            <summary>
            Determine the current history session id. 
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetPaytableInformation">
            <summary>
            Returns all paytable information
            Note: may take a while, depending on the number of games implemented
            </summary>
            <returns>List of paytable information</returns>
            <remarks>Temporary until IEgm Paytable interface is complete</remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.PressButtonPanel(IGT.PA.Framework.EgmClients.Avp.Enumerations.AvpButtonIndex)">
            <summary>
            Press a button on the AVP Button Panel
            </summary>
            <param name="button">specified button to press and release.</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.SetRealRng">
            <summary>
            Enable the Real RNG on the AVP machine.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.EnableEvents(System.Boolean)">
            <summary>
            Test Enable/Disable the event Server
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.SetTestRng">
            <summary>
            Enable the Test RNG on the AVP machine.
            Make sure to seed values using SetRandomNumbers or SetReelStops
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.IsTestRngEnabled">
            <summary>
            Determine if the Test RNG is enabled.
            </summary>
            <returns>True if game is using the Test RNG</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.ClearRngFilters">
            <summary>
            Clear all callers from the RNG Filter list.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.AddRngFilter(System.String)">
            <summary>
            Add a caller to the Filter List
            </summary>
            <param name="callerId">caller name</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.EnableRngFilter">
            <summary>
            Enable the RNG Filter mechanism.
            This causes certain callers to be filtered to the real RNG.
            Only applies when both the filter and test rng are enabled.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.DisableRngFilter">
            <summary>
            Disable the RNG filter.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetMeters(IGT.PA.Framework.EgmClients.Avp.Rpc.MeterType,System.String)">
            <summary>
            Retreive a meter or set of meters based on type, and path.
            Note: if an incorrect type is given, this could potentially crash the EGM.
            </summary>
            <param name="type">Meter Type</param>
            <param name="path">Path to meter</param>
            <returns>Meter values, null on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetEventLogs(IGT.PA.Framework.EgmClients.Interfaces.Enumerations.MenuLogTypes)">
            <summary>
            Retreive a event logs
            Note: if an incorrect type is given, this could potentially crash the EGM.
            </summary>
            <param name="type">Log Type</param>
            <param name="path">Path to Log</param>
            <returns>Event Log values, null on error</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetCurrentMenuContext">
            <summary>
            Gets The Current Context
            </summary>
            <returns>True</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.ClearPeriodMeters">
            <summary>
            Clears Period Meters
            </summary>
            <returns>True</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.ClearAllMeters">
            <summary>
            Clears All Meters
            </summary>
            <returns>True</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.ClearBillMeters">
            <summary>
            Clears Bill Meters
            </summary>
            <returns>True</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.GetMeters(IGT.PA.Framework.EgmClients.Avp.Rpc.MeterRequest[])">
            <summary>
            Wrapper to the RPC method that gets a multiple meter values in one call.
            Used primarily by the AvpMeter class.
            </summary>
            <param name="requests">Meter Requests</param>
            <returns>Meter Results</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.SwitchGame(System.Int32,System.Int32)">
            <summary>
            Switch to a specified game index.
            </summary>
            <param name="gameIndex">Specified game</param>
            <param name="denom">Denomination to select, 0 for default</param>
            <returns>True on success</returns>
            <remarks>
            Game must be enabled and playable. 
            Switching to the active game will attempt to change the denom.
            </remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.EnableGame(System.Int32,System.Boolean)">
            <summary>
            Enable a specific game (paytable).
            </summary>
            <param name="gameIndex">Game Index</param>
            <param name="enabled">True to enable, false to disable</param>
            <returns>True on success</returns>
            <remarks>
            Specific Denominations will need to be enabled as well.
            If no denominations are currently enabled, the first available denom will be enabled.
            </remarks>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.SetGameDenoms(System.Int32,System.Int32[])">
            <summary>
            Set enabled denominations for a specified game (paytable)
            </summary>
            <param name="gameIndex">game index</param>
            <param name="denoms">enabled denominations</param>
            <returns>True on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.RaiseEvent(System.String,System.EventArgs)">
            <summary>
            Function used to dynamically raise an event inside this class, based on it's name.
            </summary>
            <param name="eventName">Name of event to raise</param>
            <param name="ea">Event args to use when invoking the event</param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.ConfigPath">
            <summary>
            Default Path to load configuration files from.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.XmlDefaultConfigPath">
            <summary>
            GetBank the path to the Xml file which contains info about dynamic config items.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.IsConnected">
            <summary>
            Test if we are connected to the EGM.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.ApiVersion">
            <summary>
            XML-RPC API Version
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.SystemAvpVersion">
            <summary>
            Avp Version
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.SystemConfigVersion">
            <summary>
            Config Version
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.SystemVersion">
            <summary>
            String describing the current system version
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.CurrentCountryCode">
            <summary>
            Current country code in use by the EGM
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.HasXDoor">
            <summary>
            Determine if the machine connected is monitoring the X Door
            </summary>
            <remarks>Currently only used by SLVQ</remarks>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.Stream">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.CommunicationsObject">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.TypeofMachine">
            <summary>
            Typeofs the machine.
            </summary>
            <returns></returns>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.Disconnected">
            <summary>
            Called when a connection to the EGM is lost
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.Name">
            <summary>
            The name of the object that uniquely identifies the object
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.Code">
            <summary>
            A short name used to identify the object
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.Id">
            <summary>
            The numeric identifier for an object that uniquely identifies it
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.IsActive">
            <summary>
            Determines whether the object is an active record, when true; or inactive, when false
            </summary>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.NameChanged">
            <summary>
            This event fires when the <see cref="P:IGT.PA.Framework.EgmClients.Interfaces.IBaseDataObject.Name"/> is changed
            </summary>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.CodeChanged">
            <summary>
            This event fires when the <see cref="P:IGT.PA.Framework.EgmClients.Interfaces.IBaseDataObject.Code"/> is changed
            </summary>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.BronxEgmApi.IdChanged">
            <summary>
            This event fires when the <see cref="P:IGT.PA.Framework.EgmClients.Interfaces.IBaseDataObject.Id"/> is changed
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.AvpMeterExpression">
            <summary>
            AvpMeter with value based on an expression instead of a specific AVP Meter.
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.AvpMeterExpression.lastValue">
            <summary>
            Contains the last known value this expression evaluated to.
            </summary>
        </member>
        <member name="F:IGT.PA.Framework.EgmClients.Avp.AvpMeterExpression.expression">
            <summary>
            Expression string to evaluate for meter value.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeterExpression.Evaluate">
            <summary>
            Evaluate the expression.
            Raise MeterChanged, or MeterReset if needed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeterExpression.ResetMeter">
            <inheritdoc/>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.AvpMeterExpression.IncrementMeter(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpMeterExpression.MeterValue">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpMeterExpression.SubMeters">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpMeterExpression.MeterReset">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpMeterExpression.MeterChanged">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpMeterExpression.Name">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpMeterExpression.Code">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpMeterExpression.Id">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpMeterExpression.IsActive">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpMeterExpression.NameChanged">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpMeterExpression.CodeChanged">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpMeterExpression.IdChanged">
            <inheritdoc/>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage">
            <summary>
            Stores and extracts information from an AVP Screenshot.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.#ctor(System.Byte[])">
            <summary>
            Loads an image from an AVP machine from a byte array.
            Currently supports PNG and JPEG.
            </summary>
            <param name="imageData">PNG or JPEG data from an EGM</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.#ctor(System.Drawing.Image,IGT.PA.Framework.EgmClients.Interfaces.Enumerations.ScreenshotData)">
            <summary>
            Load an image that contains an EGM capture.
            </summary>
            <param name="rawImage">Screenshot</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.Clear">
            <summary>
            Clear the object of all image data.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.Load(System.Drawing.Image)">
            <summary>
            Load an image that contains an EGM capture.
            </summary>
            <param name="rawImage">Screenshot</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.Load(System.Byte[])">
            <summary>
            Load an image from a byte array
            </summary>
            <param name="imageData">raw image</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.Load(System.String)">
            <summary>
            Load an AVP Screenshot from a file.
            </summary>
            <param name="imagePath">Path to screenshot</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.Save(System.String)">
            <summary>
            Save this image as a file. 
            This will be stored in the same format as the image loaded.
            </summary>
            <param name="imagePath">Path to save image.</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.BuildImages">
            <summary>
            This function builds the top and main screen images, requires screen data.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.BuildScreenData">
            <summary>
            Parse screen data from the metadata of a screenshot.
            </summary>
            <returns>true on success</returns>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.Dispose(System.Boolean)">
            <summary>
            Make sure we properly dispose of images.
            </summary>
            <param name="disposing">see IDisposable interface</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.Dispose">
            <summary>
            Make sure we properly dispose of images.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.Type">
            <summary>
            Returns the type of image.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.MldFrontLayer">
            <summary>
            Front layer of the MLD monitor.
            Returns null if this image was not captured on an MLD.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.MldBackLayer">
            <summary>
            Back layer of the MLD monitor.
            Returns null if this image was not captured on an MLD.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.RawImage">
            <summary>
            This is the raw image retreived from the EGM.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.TopScreen">
            <summary>
            This image represents the top screen.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.MainScreen">
            <summary>
            This image represents the main screen.
            </summary>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.Utility.AvpImage.Metadata">
            <summary>
            Metadata tags associated with the image.
            </summary>
        </member>
        <member name="T:IGT.PA.Framework.EgmClients.Avp.Extensions.EventExtensions">
            <summary>
            Static Extensions class for events.
            </summary>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Extensions.EventExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Adds a Raise() method to events
            </summary>
            <typeparam name="T">EventArgs inherited type</typeparam>
            <param name="handler">EventHandler to invoke</param>
            <param name="sender">Event sender</param>
            <param name="args">Event args</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Extensions.EventExtensions.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Adds a Raise() method to events
            </summary>
            <param name="handler">EventHandler to invoke</param>
            <param name="sender">Event sender</param>
            <param name="args">EventArgs</param>
        </member>
        <member name="M:IGT.PA.Framework.EgmClients.Avp.Extensions.EventExtensions.Raise(System.EventHandler,System.Object)">
            <summary>
            Adds a Raise() method to events
            </summary>
            <param name="handler">EventHandler to invoke</param>
            <param name="sender">Event sender</param>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpTheme.Name">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpTheme.Code">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpTheme.Id">
            <inheritdoc/>
        </member>
        <member name="P:IGT.PA.Framework.EgmClients.Avp.AvpTheme.IsActive">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpTheme.NameChanged">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpTheme.CodeChanged">
            <inheritdoc/>
        </member>
        <member name="E:IGT.PA.Framework.EgmClients.Avp.AvpTheme.IdChanged">
            <inheritdoc/>
        </member>
    </members>
</doc>
